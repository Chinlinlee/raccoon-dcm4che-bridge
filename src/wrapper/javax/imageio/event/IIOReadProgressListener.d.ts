import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { ImageReader as javax_imageio_ImageReader } from "./../ImageReader";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Float as java_lang_Float } from "./../../../java/lang/Float";
/**
 * This class just defines types, you should import {@link IIOReadProgressListener} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IIOReadProgressListenerClass extends JavaClass {
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    imageComplete(var0: javax_imageio_ImageReader | null): Promise<void>;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    imageCompleteSync(var0: javax_imageio_ImageReader | null): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    thumbnailComplete(var0: javax_imageio_ImageReader | null): Promise<void>;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    thumbnailCompleteSync(var0: javax_imageio_ImageReader | null): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    sequenceStarted(var0: javax_imageio_ImageReader | null, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    sequenceStartedSync(var0: javax_imageio_ImageReader | null, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    imageStarted(var0: javax_imageio_ImageReader | null, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    imageStartedSync(var0: javax_imageio_ImageReader | null, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    thumbnailStarted(var0: javax_imageio_ImageReader | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    thumbnailStartedSync(var0: javax_imageio_ImageReader | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    sequenceComplete(var0: javax_imageio_ImageReader | null): Promise<void>;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    sequenceCompleteSync(var0: javax_imageio_ImageReader | null): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'float'
     * @return original return type: 'void'
     */
    thumbnailProgress(var0: javax_imageio_ImageReader | null, var1: java_lang_Float | number): Promise<void>;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'float'
     * @return original return type: 'void'
     */
    thumbnailProgressSync(var0: javax_imageio_ImageReader | null, var1: java_lang_Float | number): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'float'
     * @return original return type: 'void'
     */
    imageProgress(var0: javax_imageio_ImageReader | null, var1: java_lang_Float | number): Promise<void>;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'float'
     * @return original return type: 'void'
     */
    imageProgressSync(var0: javax_imageio_ImageReader | null, var1: java_lang_Float | number): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    readAborted(var0: javax_imageio_ImageReader | null): Promise<void>;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    readAbortedSync(var0: javax_imageio_ImageReader | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createIIOReadProgressListenerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface IIOReadProgressListenerInterface {
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    imageComplete(var0: javax_imageio_ImageReader | null): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    thumbnailComplete(var0: javax_imageio_ImageReader | null): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    sequenceStarted(var0: javax_imageio_ImageReader | null, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    imageStarted(var0: javax_imageio_ImageReader | null, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    thumbnailStarted(var0: javax_imageio_ImageReader | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    sequenceComplete(var0: javax_imageio_ImageReader | null): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'float'
     * @return original return type: 'void'
     */
    thumbnailProgress(var0: javax_imageio_ImageReader | null, var1: java_lang_Float | number): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @param var1 original type: 'float'
     * @return original return type: 'void'
     */
    imageProgress(var0: javax_imageio_ImageReader | null, var1: java_lang_Float | number): void;
    /**
     * @param var0 original type: 'javax.imageio.ImageReader'
     * @return original return type: 'void'
     */
    readAborted(var0: javax_imageio_ImageReader | null): void;
}
/**
 * Create a proxy for the {@link IIOReadProgressListener} interface.
 * All required methods in {@link IIOReadProgressListenerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createIIOReadProgressListenerProxy(methods: IIOReadProgressListenerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<IIOReadProgressListenerInterface>;
declare const IIOReadProgressListener_base: typeof IIOReadProgressListenerClass;
/**
 * Class javax.imageio.event.IIOReadProgressListener.
 *
 * This actually imports the java class for further use.
 * The class {@link IIOReadProgressListenerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IIOReadProgressListener extends IIOReadProgressListener_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default IIOReadProgressListener;
