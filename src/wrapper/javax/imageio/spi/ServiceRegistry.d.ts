import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Iterator as java_util_Iterator, IteratorInterface as java_util_IteratorInterface } from "./../../../java/util/Iterator";
import { ClassLoader as java_lang_ClassLoader } from "./../../../java/lang/ClassLoader";
import { Boolean as java_lang_Boolean } from "./../../../java/lang/Boolean";
import { ServiceRegistry$Filter as javax_imageio_spi_ServiceRegistry$Filter, ServiceRegistry$FilterInterface as javax_imageio_spi_ServiceRegistry$FilterInterface } from "./ServiceRegistry$Filter";
/**
 * This class just defines types, you should import {@link ServiceRegistry} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ServiceRegistryClass extends JavaClass {
    /**
     * @return original return type: 'void'
     */
    deregisterAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    deregisterAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'void'
     */
    deregisterAll(var0: java_lang_Class | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'void'
     */
    deregisterAllSync(var0: java_lang_Class | null): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    unsetOrdering(var0: java_lang_Class | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    unsetOrderingSync(var0: java_lang_Class | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.ClassLoader'
     * @return original return type: 'java.util.Iterator'
     */
    static lookupProviders(var0: java_lang_Class | null, var1: java_lang_ClassLoader | null): Promise<java_util_Iterator | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.ClassLoader'
     * @return original return type: 'java.util.Iterator'
     */
    static lookupProvidersSync(var0: java_lang_Class | null, var1: java_lang_ClassLoader | null): java_util_Iterator | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.util.Iterator'
     */
    static lookupProviders(var0: java_lang_Class | null): Promise<java_util_Iterator | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.util.Iterator'
     */
    static lookupProvidersSync(var0: java_lang_Class | null): java_util_Iterator | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'boolean'
     * @return original return type: 'java.util.Iterator'
     */
    getServiceProviders(var0: java_lang_Class | null, var1: java_lang_Boolean | boolean): Promise<java_util_Iterator | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'boolean'
     * @return original return type: 'java.util.Iterator'
     */
    getServiceProvidersSync(var0: java_lang_Class | null, var1: java_lang_Boolean | boolean): java_util_Iterator | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'javax.imageio.spi.ServiceRegistry$Filter'
     * @param var2 original type: 'boolean'
     * @return original return type: 'java.util.Iterator'
     */
    getServiceProviders(var0: java_lang_Class | null, var1: javax_imageio_spi_ServiceRegistry$Filter | JavaInterfaceProxy<javax_imageio_spi_ServiceRegistry$FilterInterface> | null, var2: java_lang_Boolean | boolean): Promise<java_util_Iterator | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'javax.imageio.spi.ServiceRegistry$Filter'
     * @param var2 original type: 'boolean'
     * @return original return type: 'java.util.Iterator'
     */
    getServiceProvidersSync(var0: java_lang_Class | null, var1: javax_imageio_spi_ServiceRegistry$Filter | JavaInterfaceProxy<javax_imageio_spi_ServiceRegistry$FilterInterface> | null, var2: java_lang_Boolean | boolean): java_util_Iterator | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    deregisterServiceProvider(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    deregisterServiceProviderSync(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    deregisterServiceProvider(var0: BasicOrJavaType | null, var1: java_lang_Class | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    deregisterServiceProviderSync(var0: BasicOrJavaType | null, var1: java_lang_Class | null): boolean;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    registerServiceProvider(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    registerServiceProviderSync(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    registerServiceProvider(var0: BasicOrJavaType | null, var1: java_lang_Class | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    registerServiceProviderSync(var0: BasicOrJavaType | null, var1: java_lang_Class | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    contains(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    containsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    setOrdering(var0: java_lang_Class | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    setOrderingSync(var0: java_lang_Class | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.util.Iterator'
     * @return original return type: 'void'
     */
    registerServiceProviders(var0: java_util_Iterator | JavaInterfaceProxy<java_util_IteratorInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.Iterator'
     * @return original return type: 'void'
     */
    registerServiceProvidersSync(var0: java_util_Iterator | JavaInterfaceProxy<java_util_IteratorInterface> | null): void;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    getCategories(): Promise<java_util_Iterator | null>;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    getCategoriesSync(): java_util_Iterator | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'void'
     */
    finalize(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    finalizeSync(): void;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.Object'
     */
    getServiceProviderByClass(var0: java_lang_Class | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.Object'
     */
    getServiceProviderByClassSync(var0: java_lang_Class | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.Iterator'
     */
    constructor(var0: java_util_Iterator | JavaInterfaceProxy<java_util_IteratorInterface> | null);
    /**
     * @param var0 original type: 'java.util.Iterator'
     * @return original return type: 'javax.imageio.spi.ServiceRegistry'
     */
    static newInstanceAsync(var0: java_util_Iterator | JavaInterfaceProxy<java_util_IteratorInterface> | null): Promise<ServiceRegistry>;
}
declare const ServiceRegistry_base: typeof ServiceRegistryClass;
/**
 * Class javax.imageio.spi.ServiceRegistry.
 *
 * This actually imports the java class for further use.
 * The class {@link ServiceRegistryClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ServiceRegistry extends ServiceRegistry_base {
}
export default ServiceRegistry;
//# sourceMappingURL=ServiceRegistry.d.ts.map