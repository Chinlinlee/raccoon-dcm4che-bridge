import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Location as javax_xml_stream_Location } from "./Location";
import { QName as javax_xml_namespace_QName } from "./../namespace/QName";
import { NamespaceContext as javax_xml_namespace_NamespaceContext } from "./../namespace/NamespaceContext";
/**
 * This class just defines types, you should import {@link XMLStreamReader} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class XMLStreamReaderClass extends JavaClass {
    /**
     * @return original return type: 'int'
     */
    next(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    nextSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeType(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeTypeSync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'javax.xml.stream.Location'
     */
    getLocation(): Promise<javax_xml_stream_Location | null>;
    /**
     * @return original return type: 'javax.xml.stream.Location'
     */
    getLocationSync(): javax_xml_stream_Location | null;
    /**
     * @return original return type: 'boolean'
     */
    hasName(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasNameSync(): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPIData(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPIDataSync(): string | null;
    /**
     * @return original return type: 'javax.xml.namespace.QName'
     */
    getName(): Promise<javax_xml_namespace_QName | null>;
    /**
     * @return original return type: 'javax.xml.namespace.QName'
     */
    getNameSync(): javax_xml_namespace_QName | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getAttributeValue(var0: string | null, var1: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getAttributeValueSync(var0: string | null, var1: string | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeValue(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeValueSync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'int'
     */
    getNamespaceCount(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getNamespaceCountSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isWhiteSpace(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isWhiteSpaceSync(): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    getEncoding(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getEncodingSync(): string | null;
    /**
     * @return original return type: 'char[]'
     */
    getTextCharacters(): Promise<(string | null)[] | null>;
    /**
     * @return original return type: 'char[]'
     */
    getTextCharactersSync(): (string | null)[] | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'char[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'int'
     */
    getTextCharacters(var0: java_lang_Integer | number, var1: (string | null)[] | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'char[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'int'
     */
    getTextCharactersSync(var0: java_lang_Integer | number, var1: (string | null)[] | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getElementText(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getElementTextSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isCharacters(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isCharactersSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    getTextStart(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getTextStartSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getNamespacePrefix(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getNamespacePrefixSync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isStandalone(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isStandaloneSync(): boolean;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributePrefix(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributePrefixSync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getVersion(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getVersionSync(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getProperty(var0: string | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getPropertySync(var0: string | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPrefix(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPrefixSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getText(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getTextSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPITarget(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPITargetSync(): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    isAttributeSpecified(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    isAttributeSpecifiedSync(var0: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'boolean'
     */
    hasNext(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasNextSync(): boolean;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    require(var0: java_lang_Integer | number, var1: string | null, var2: string | null): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    requireSync(var0: java_lang_Integer | number, var1: string | null, var2: string | null): void;
    /**
     * @return original return type: 'int'
     */
    getAttributeCount(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getAttributeCountSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.xml.namespace.QName'
     */
    getAttributeName(var0: java_lang_Integer | number): Promise<javax_xml_namespace_QName | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.xml.namespace.QName'
     */
    getAttributeNameSync(var0: java_lang_Integer | number): javax_xml_namespace_QName | null;
    /**
     * @return original return type: 'boolean'
     */
    hasText(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasTextSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    nextTag(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    nextTagSync(): number;
    /**
     * @return original return type: 'int'
     */
    getTextLength(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getTextLengthSync(): number;
    /**
     * @return original return type: 'int'
     */
    getEventType(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getEventTypeSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCharacterEncodingScheme(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCharacterEncodingSchemeSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getLocalName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getLocalNameSync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isEndElement(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isEndElementSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURI(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURISync(var0: string | null): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURI(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURISync(): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURI(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURISync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isStartElement(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isStartElementSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    standaloneSet(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    standaloneSetSync(): boolean;
    /**
     * @return original return type: 'javax.xml.namespace.NamespaceContext'
     */
    getNamespaceContext(): Promise<javax_xml_namespace_NamespaceContext | null>;
    /**
     * @return original return type: 'javax.xml.namespace.NamespaceContext'
     */
    getNamespaceContextSync(): javax_xml_namespace_NamespaceContext | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeLocalName(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeLocalNameSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeNamespace(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeNamespaceSync(var0: java_lang_Integer | number): string | null;
    /**
     * Original type: 'int'
     */
    static readonly NAMESPACE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ENTITY_REFERENCE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ATTRIBUTE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly END_DOCUMENT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly END_ELEMENT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly COMMENT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CHARACTERS: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly START_ELEMENT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SPACE: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly ENTITY_DECLARATION: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly DTD: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly PROCESSING_INSTRUCTION: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly NOTATION_DECLARATION: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly START_DOCUMENT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CDATA: java_lang_Integer | number;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createXMLStreamReaderProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface XMLStreamReaderInterface {
    /**
     * @return original return type: 'int'
     */
    next(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeType(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'javax.xml.stream.Location'
     */
    getLocation(): javax_xml_stream_Location | null;
    /**
     * @return original return type: 'boolean'
     */
    hasName(): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPIData(): string | null;
    /**
     * @return original return type: 'javax.xml.namespace.QName'
     */
    getName(): javax_xml_namespace_QName | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getAttributeValue(var0: string | null, var1: string | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeValue(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'int'
     */
    getNamespaceCount(): number;
    /**
     * @return original return type: 'boolean'
     */
    isWhiteSpace(): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    getEncoding(): string | null;
    /**
     * @return original return type: 'char[]'
     */
    getTextCharacters(): (string | null)[] | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'char[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'int'
     */
    getTextCharacters(var0: java_lang_Integer | number, var1: (string | null)[] | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getElementText(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isCharacters(): boolean;
    /**
     * @return original return type: 'int'
     */
    getTextStart(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getNamespacePrefix(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isStandalone(): boolean;
    /**
     * @return original return type: 'void'
     */
    close(): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributePrefix(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getVersion(): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getProperty(var0: string | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPrefix(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getText(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPITarget(): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    isAttributeSpecified(var0: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'boolean'
     */
    hasNext(): boolean;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    require(var0: java_lang_Integer | number, var1: string | null, var2: string | null): void;
    /**
     * @return original return type: 'int'
     */
    getAttributeCount(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'javax.xml.namespace.QName'
     */
    getAttributeName(var0: java_lang_Integer | number): javax_xml_namespace_QName | null;
    /**
     * @return original return type: 'boolean'
     */
    hasText(): boolean;
    /**
     * @return original return type: 'int'
     */
    nextTag(): number;
    /**
     * @return original return type: 'int'
     */
    getTextLength(): number;
    /**
     * @return original return type: 'int'
     */
    getEventType(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getCharacterEncodingScheme(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getLocalName(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isEndElement(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURI(var0: string | null): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURI(): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURI(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isStartElement(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    standaloneSet(): boolean;
    /**
     * @return original return type: 'javax.xml.namespace.NamespaceContext'
     */
    getNamespaceContext(): javax_xml_namespace_NamespaceContext | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeLocalName(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    getAttributeNamespace(var0: java_lang_Integer | number): string | null;
}
/**
 * Create a proxy for the {@link XMLStreamReader} interface.
 * All required methods in {@link XMLStreamReaderInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createXMLStreamReaderProxy(methods: XMLStreamReaderInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<XMLStreamReaderInterface>;
declare const XMLStreamReader_base: typeof XMLStreamReaderClass;
/**
 * Class javax.xml.stream.XMLStreamReader.
 *
 * This actually imports the java class for further use.
 * The class {@link XMLStreamReaderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class XMLStreamReader extends XMLStreamReader_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default XMLStreamReader;
//# sourceMappingURL=XMLStreamReader.d.ts.map