import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Iterator as java_util_Iterator } from "./../../../java/util/Iterator";
/**
 * This class just defines types, you should import {@link NamespaceContext} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class NamespaceContextClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getPrefix(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getPrefixSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURI(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURISync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Iterator'
     */
    getPrefixes(var0: string | null): Promise<java_util_Iterator | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Iterator'
     */
    getPrefixesSync(var0: string | null): java_util_Iterator | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createNamespaceContextProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface NamespaceContextInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getPrefix(var0: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    getNamespaceURI(var0: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.util.Iterator'
     */
    getPrefixes(var0: string | null): java_util_Iterator | null;
}
/**
 * Create a proxy for the {@link NamespaceContext} interface.
 * All required methods in {@link NamespaceContextInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createNamespaceContextProxy(methods: NamespaceContextInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<NamespaceContextInterface>;
declare const NamespaceContext_base: typeof NamespaceContextClass;
/**
 * Class javax.xml.namespace.NamespaceContext.
 *
 * This actually imports the java class for further use.
 * The class {@link NamespaceContextClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class NamespaceContext extends NamespaceContext_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default NamespaceContext;
//# sourceMappingURL=NamespaceContext.d.ts.map