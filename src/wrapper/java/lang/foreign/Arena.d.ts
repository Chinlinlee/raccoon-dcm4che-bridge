import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { MemorySegment as java_lang_foreign_MemorySegment, MemorySegmentInterface as java_lang_foreign_MemorySegmentInterface } from "./MemorySegment";
import { Long as java_lang_Long } from "./../Long";
import { ValueLayout$OfFloat as java_lang_foreign_ValueLayout$OfFloat, ValueLayout$OfFloatInterface as java_lang_foreign_ValueLayout$OfFloatInterface } from "./ValueLayout$OfFloat";
import { Float as java_lang_Float } from "./../Float";
import { ValueLayout$OfLong as java_lang_foreign_ValueLayout$OfLong, ValueLayout$OfLongInterface as java_lang_foreign_ValueLayout$OfLongInterface } from "./ValueLayout$OfLong";
import { MemoryLayout as java_lang_foreign_MemoryLayout, MemoryLayoutInterface as java_lang_foreign_MemoryLayoutInterface } from "./MemoryLayout";
import { AddressLayout as java_lang_foreign_AddressLayout, AddressLayoutInterface as java_lang_foreign_AddressLayoutInterface } from "./AddressLayout";
import { ValueLayout$OfDouble as java_lang_foreign_ValueLayout$OfDouble, ValueLayout$OfDoubleInterface as java_lang_foreign_ValueLayout$OfDoubleInterface } from "./ValueLayout$OfDouble";
import { Double as java_lang_Double } from "./../Double";
import { ValueLayout$OfByte as java_lang_foreign_ValueLayout$OfByte, ValueLayout$OfByteInterface as java_lang_foreign_ValueLayout$OfByteInterface } from "./ValueLayout$OfByte";
import { Byte as java_lang_Byte } from "./../Byte";
import { ValueLayout$OfChar as java_lang_foreign_ValueLayout$OfChar, ValueLayout$OfCharInterface as java_lang_foreign_ValueLayout$OfCharInterface } from "./ValueLayout$OfChar";
import { ValueLayout$OfShort as java_lang_foreign_ValueLayout$OfShort, ValueLayout$OfShortInterface as java_lang_foreign_ValueLayout$OfShortInterface } from "./ValueLayout$OfShort";
import { Short as java_lang_Short } from "./../Short";
import { ValueLayout$OfInt as java_lang_foreign_ValueLayout$OfInt, ValueLayout$OfIntInterface as java_lang_foreign_ValueLayout$OfIntInterface } from "./ValueLayout$OfInt";
import { Integer as java_lang_Integer } from "./../Integer";
import { MemorySegment$Scope as java_lang_foreign_MemorySegment$Scope } from "./MemorySegment$Scope";
/**
 * This class just defines types, you should import {@link Arena} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ArenaClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.foreign.Arena'
     */
    static ofAuto(): Promise<Arena | null>;
    /**
     * @return original return type: 'java.lang.foreign.Arena'
     */
    static ofAutoSync(): Arena | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate(var0: java_lang_Long | bigint | number, var1: java_lang_Long | bigint | number): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateSync(var0: java_lang_Long | bigint | number, var1: java_lang_Long | bigint | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfFloat'
     * @param var1 original type: 'float'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate(var0: java_lang_foreign_ValueLayout$OfFloat | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfFloatInterface> | null, var1: java_lang_Float | number): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfFloat'
     * @param var1 original type: 'float'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateSync(var0: java_lang_foreign_ValueLayout$OfFloat | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfFloatInterface> | null, var1: java_lang_Float | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfLong'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate(var0: java_lang_foreign_ValueLayout$OfLong | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfLongInterface> | null, var1: java_lang_Long | bigint | number): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfLong'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateSync(var0: java_lang_foreign_ValueLayout$OfLong | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfLongInterface> | null, var1: java_lang_Long | bigint | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate(var0: java_lang_foreign_MemoryLayout | JavaInterfaceProxy<java_lang_foreign_MemoryLayoutInterface> | null): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateSync(var0: java_lang_foreign_MemoryLayout | JavaInterfaceProxy<java_lang_foreign_MemoryLayoutInterface> | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.AddressLayout'
     * @param var1 original type: 'java.lang.foreign.MemorySegment'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate(var0: java_lang_foreign_AddressLayout | JavaInterfaceProxy<java_lang_foreign_AddressLayoutInterface> | null, var1: java_lang_foreign_MemorySegment | JavaInterfaceProxy<java_lang_foreign_MemorySegmentInterface> | null): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.AddressLayout'
     * @param var1 original type: 'java.lang.foreign.MemorySegment'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateSync(var0: java_lang_foreign_AddressLayout | JavaInterfaceProxy<java_lang_foreign_AddressLayoutInterface> | null, var1: java_lang_foreign_MemorySegment | JavaInterfaceProxy<java_lang_foreign_MemorySegmentInterface> | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate(var0: java_lang_Long | bigint | number): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateSync(var0: java_lang_Long | bigint | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfDouble'
     * @param var1 original type: 'double'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate(var0: java_lang_foreign_ValueLayout$OfDouble | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfDoubleInterface> | null, var1: java_lang_Double | number): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfDouble'
     * @param var1 original type: 'double'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateSync(var0: java_lang_foreign_ValueLayout$OfDouble | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfDoubleInterface> | null, var1: java_lang_Double | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfByte'
     * @param var1 original type: 'byte'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate(var0: java_lang_foreign_ValueLayout$OfByte | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfByteInterface> | null, var1: java_lang_Byte | number): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfByte'
     * @param var1 original type: 'byte'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateSync(var0: java_lang_foreign_ValueLayout$OfByte | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfByteInterface> | null, var1: java_lang_Byte | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfChar'
     * @param var1 original type: 'char'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate(var0: java_lang_foreign_ValueLayout$OfChar | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfCharInterface> | null, var1: string | null): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfChar'
     * @param var1 original type: 'char'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateSync(var0: java_lang_foreign_ValueLayout$OfChar | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfCharInterface> | null, var1: string | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfShort'
     * @param var1 original type: 'short'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate(var0: java_lang_foreign_ValueLayout$OfShort | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfShortInterface> | null, var1: java_lang_Short | number): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfShort'
     * @param var1 original type: 'short'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateSync(var0: java_lang_foreign_ValueLayout$OfShort | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfShortInterface> | null, var1: java_lang_Short | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfInt'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate(var0: java_lang_foreign_ValueLayout$OfInt | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfIntInterface> | null, var1: java_lang_Integer | number): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfInt'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateSync(var0: java_lang_foreign_ValueLayout$OfInt | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfIntInterface> | null, var1: java_lang_Integer | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfDouble'
     * @param var1 original type: 'double[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray(var0: java_lang_foreign_ValueLayout$OfDouble | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfDoubleInterface> | null, var1: (java_lang_Double | number)[] | null): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfDouble'
     * @param var1 original type: 'double[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArraySync(var0: java_lang_foreign_ValueLayout$OfDouble | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfDoubleInterface> | null, var1: (java_lang_Double | number)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray(var0: java_lang_foreign_MemoryLayout | JavaInterfaceProxy<java_lang_foreign_MemoryLayoutInterface> | null, var1: java_lang_Long | bigint | number): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArraySync(var0: java_lang_foreign_MemoryLayout | JavaInterfaceProxy<java_lang_foreign_MemoryLayoutInterface> | null, var1: java_lang_Long | bigint | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfByte'
     * @param var1 original type: 'byte[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray(var0: java_lang_foreign_ValueLayout$OfByte | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfByteInterface> | null, var1: Buffer | null): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfByte'
     * @param var1 original type: 'byte[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArraySync(var0: java_lang_foreign_ValueLayout$OfByte | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfByteInterface> | null, var1: Buffer | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfShort'
     * @param var1 original type: 'short[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray(var0: java_lang_foreign_ValueLayout$OfShort | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfShortInterface> | null, var1: (java_lang_Short | number)[] | null): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfShort'
     * @param var1 original type: 'short[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArraySync(var0: java_lang_foreign_ValueLayout$OfShort | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfShortInterface> | null, var1: (java_lang_Short | number)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfChar'
     * @param var1 original type: 'char[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray(var0: java_lang_foreign_ValueLayout$OfChar | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfCharInterface> | null, var1: (string | null)[] | null): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfChar'
     * @param var1 original type: 'char[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArraySync(var0: java_lang_foreign_ValueLayout$OfChar | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfCharInterface> | null, var1: (string | null)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfLong'
     * @param var1 original type: 'long[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray(var0: java_lang_foreign_ValueLayout$OfLong | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfLongInterface> | null, var1: (java_lang_Long | bigint | number)[] | null): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfLong'
     * @param var1 original type: 'long[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArraySync(var0: java_lang_foreign_ValueLayout$OfLong | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfLongInterface> | null, var1: (java_lang_Long | bigint | number)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfFloat'
     * @param var1 original type: 'float[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray(var0: java_lang_foreign_ValueLayout$OfFloat | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfFloatInterface> | null, var1: (java_lang_Float | number)[] | null): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfFloat'
     * @param var1 original type: 'float[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArraySync(var0: java_lang_foreign_ValueLayout$OfFloat | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfFloatInterface> | null, var1: (java_lang_Float | number)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfInt'
     * @param var1 original type: 'int[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray(var0: java_lang_foreign_ValueLayout$OfInt | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfIntInterface> | null, var1: (java_lang_Integer | number)[] | null): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfInt'
     * @param var1 original type: 'int[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArraySync(var0: java_lang_foreign_ValueLayout$OfInt | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfIntInterface> | null, var1: (java_lang_Integer | number)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @return original return type: 'java.lang.foreign.MemorySegment$Scope'
     */
    scope(): Promise<java_lang_foreign_MemorySegment$Scope | null>;
    /**
     * @return original return type: 'java.lang.foreign.MemorySegment$Scope'
     */
    scopeSync(): java_lang_foreign_MemorySegment$Scope | null;
    /**
     * @return original return type: 'java.lang.foreign.Arena'
     */
    static global(): Promise<Arena | null>;
    /**
     * @return original return type: 'java.lang.foreign.Arena'
     */
    static globalSync(): Arena | null;
    /**
     * @return original return type: 'java.lang.foreign.Arena'
     */
    static ofShared(): Promise<Arena | null>;
    /**
     * @return original return type: 'java.lang.foreign.Arena'
     */
    static ofSharedSync(): Arena | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateUtf8String(var0: string | null): Promise<java_lang_foreign_MemorySegment | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateUtf8StringSync(var0: string | null): java_lang_foreign_MemorySegment | null;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
    /**
     * @return original return type: 'java.lang.foreign.Arena'
     */
    static ofConfined(): Promise<Arena | null>;
    /**
     * @return original return type: 'java.lang.foreign.Arena'
     */
    static ofConfinedSync(): Arena | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createArenaProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface ArenaInterface {
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate?(var0: java_lang_Long | bigint | number, var1: java_lang_Long | bigint | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfFloat'
     * @param var1 original type: 'float'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate?(var0: java_lang_foreign_ValueLayout$OfFloat | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfFloatInterface> | null, var1: java_lang_Float | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfLong'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate?(var0: java_lang_foreign_ValueLayout$OfLong | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfLongInterface> | null, var1: java_lang_Long | bigint | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate?(var0: java_lang_foreign_MemoryLayout | JavaInterfaceProxy<java_lang_foreign_MemoryLayoutInterface> | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.AddressLayout'
     * @param var1 original type: 'java.lang.foreign.MemorySegment'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate?(var0: java_lang_foreign_AddressLayout | JavaInterfaceProxy<java_lang_foreign_AddressLayoutInterface> | null, var1: java_lang_foreign_MemorySegment | JavaInterfaceProxy<java_lang_foreign_MemorySegmentInterface> | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate?(var0: java_lang_Long | bigint | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfDouble'
     * @param var1 original type: 'double'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate?(var0: java_lang_foreign_ValueLayout$OfDouble | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfDoubleInterface> | null, var1: java_lang_Double | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfByte'
     * @param var1 original type: 'byte'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate?(var0: java_lang_foreign_ValueLayout$OfByte | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfByteInterface> | null, var1: java_lang_Byte | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfChar'
     * @param var1 original type: 'char'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate?(var0: java_lang_foreign_ValueLayout$OfChar | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfCharInterface> | null, var1: string | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfShort'
     * @param var1 original type: 'short'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate?(var0: java_lang_foreign_ValueLayout$OfShort | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfShortInterface> | null, var1: java_lang_Short | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfInt'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocate?(var0: java_lang_foreign_ValueLayout$OfInt | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfIntInterface> | null, var1: java_lang_Integer | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfDouble'
     * @param var1 original type: 'double[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray?(var0: java_lang_foreign_ValueLayout$OfDouble | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfDoubleInterface> | null, var1: (java_lang_Double | number)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray?(var0: java_lang_foreign_MemoryLayout | JavaInterfaceProxy<java_lang_foreign_MemoryLayoutInterface> | null, var1: java_lang_Long | bigint | number): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfByte'
     * @param var1 original type: 'byte[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray?(var0: java_lang_foreign_ValueLayout$OfByte | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfByteInterface> | null, var1: Buffer | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfShort'
     * @param var1 original type: 'short[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray?(var0: java_lang_foreign_ValueLayout$OfShort | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfShortInterface> | null, var1: (java_lang_Short | number)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfChar'
     * @param var1 original type: 'char[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray?(var0: java_lang_foreign_ValueLayout$OfChar | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfCharInterface> | null, var1: (string | null)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfLong'
     * @param var1 original type: 'long[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray?(var0: java_lang_foreign_ValueLayout$OfLong | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfLongInterface> | null, var1: (java_lang_Long | bigint | number)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfFloat'
     * @param var1 original type: 'float[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray?(var0: java_lang_foreign_ValueLayout$OfFloat | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfFloatInterface> | null, var1: (java_lang_Float | number)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @param var0 original type: 'java.lang.foreign.ValueLayout$OfInt'
     * @param var1 original type: 'int[]'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateArray?(var0: java_lang_foreign_ValueLayout$OfInt | JavaInterfaceProxy<java_lang_foreign_ValueLayout$OfIntInterface> | null, var1: (java_lang_Integer | number)[] | null): java_lang_foreign_MemorySegment | null;
    /**
     * @return original return type: 'java.lang.foreign.MemorySegment$Scope'
     */
    scope(): java_lang_foreign_MemorySegment$Scope | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.MemorySegment'
     */
    allocateUtf8String?(var0: string | null): java_lang_foreign_MemorySegment | null;
    /**
     * @return original return type: 'void'
     */
    close(): void;
}
/**
 * Create a proxy for the {@link Arena} interface.
 * All required methods in {@link ArenaInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createArenaProxy(methods: ArenaInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<ArenaInterface>;
declare const Arena_base: typeof ArenaClass;
/**
 * Class java.lang.foreign.Arena.
 *
 * This actually imports the java class for further use.
 * The class {@link ArenaClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Arena extends Arena_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Arena;
//# sourceMappingURL=Arena.d.ts.map