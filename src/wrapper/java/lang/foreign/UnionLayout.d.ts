import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { MethodHandle as java_lang_invoke_MethodHandle } from "./../invoke/MethodHandle";
import { MemoryLayout$PathElement as java_lang_foreign_MemoryLayout$PathElement, MemoryLayout$PathElementInterface as java_lang_foreign_MemoryLayout$PathElementInterface } from "./MemoryLayout$PathElement";
import { MemoryLayout as java_lang_foreign_MemoryLayout } from "./MemoryLayout";
import { VarHandle as java_lang_invoke_VarHandle } from "./../invoke/VarHandle";
import { GroupLayout as java_lang_foreign_GroupLayout } from "./GroupLayout";
import { Long as java_lang_Long } from "./../Long";
import { List as java_util_List } from "./../../util/List";
import { Optional as java_util_Optional } from "./../../util/Optional";
/**
 * This class just defines types, you should import {@link UnionLayout} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class UnionLayoutClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    sliceHandle(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    sliceHandleSync(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    byteOffsetHandle(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): Promise<java_lang_invoke_MethodHandle | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    byteOffsetHandleSync(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    select(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): Promise<java_lang_foreign_MemoryLayout | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    selectSync(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): java_lang_foreign_MemoryLayout | null;
    /**
     * @return original return type: 'long'
     */
    byteSize(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    byteSizeSync(): number;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.invoke.VarHandle'
     */
    varHandle(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): Promise<java_lang_invoke_VarHandle | null>;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.invoke.VarHandle'
     */
    varHandleSync(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): java_lang_invoke_VarHandle | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.GroupLayout'
     */
    withByteAlignment(var0: java_lang_Long | bigint | number): Promise<java_lang_foreign_GroupLayout | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.GroupLayout'
     */
    withByteAlignmentSync(var0: java_lang_Long | bigint | number): java_lang_foreign_GroupLayout | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.UnionLayout'
     */
    withByteAlignment(var0: java_lang_Long | bigint | number): Promise<UnionLayout | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.UnionLayout'
     */
    withByteAlignmentSync(var0: java_lang_Long | bigint | number): UnionLayout | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    withByteAlignment(var0: java_lang_Long | bigint | number): Promise<java_lang_foreign_MemoryLayout | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    withByteAlignmentSync(var0: java_lang_Long | bigint | number): java_lang_foreign_MemoryLayout | null;
    /**
     * @return original return type: 'java.util.List'
     */
    memberLayouts(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    memberLayoutsSync(): java_util_List | null;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'long'
     */
    byteOffset(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'long'
     */
    byteOffsetSync(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): number;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'long'
     */
    byteAlignment(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    byteAlignmentSync(): number;
    /**
     * @return original return type: 'java.util.Optional'
     */
    name(): Promise<java_util_Optional | null>;
    /**
     * @return original return type: 'java.util.Optional'
     */
    nameSync(): java_util_Optional | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.GroupLayout'
     */
    withName(var0: string | null): Promise<java_lang_foreign_GroupLayout | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.GroupLayout'
     */
    withNameSync(var0: string | null): java_lang_foreign_GroupLayout | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    withName(var0: string | null): Promise<java_lang_foreign_MemoryLayout | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    withNameSync(var0: string | null): java_lang_foreign_MemoryLayout | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.UnionLayout'
     */
    withName(var0: string | null): Promise<UnionLayout | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.UnionLayout'
     */
    withNameSync(var0: string | null): UnionLayout | null;
    /**
     * @return original return type: 'java.lang.foreign.GroupLayout'
     */
    withoutName(): Promise<java_lang_foreign_GroupLayout | null>;
    /**
     * @return original return type: 'java.lang.foreign.GroupLayout'
     */
    withoutNameSync(): java_lang_foreign_GroupLayout | null;
    /**
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    withoutName(): Promise<java_lang_foreign_MemoryLayout | null>;
    /**
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    withoutNameSync(): java_lang_foreign_MemoryLayout | null;
    /**
     * @return original return type: 'java.lang.foreign.UnionLayout'
     */
    withoutName(): Promise<UnionLayout | null>;
    /**
     * @return original return type: 'java.lang.foreign.UnionLayout'
     */
    withoutNameSync(): UnionLayout | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createUnionLayoutProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface UnionLayoutInterface {
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    sliceHandle?(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.invoke.MethodHandle'
     */
    byteOffsetHandle?(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): java_lang_invoke_MethodHandle | null;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    select?(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): java_lang_foreign_MemoryLayout | null;
    /**
     * @return original return type: 'long'
     */
    byteSize(): number;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'java.lang.invoke.VarHandle'
     */
    varHandle?(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): java_lang_invoke_VarHandle | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.GroupLayout'
     */
    withByteAlignment?(var0: java_lang_Long | bigint | number): java_lang_foreign_GroupLayout | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.UnionLayout'
     */
    withByteAlignment?(var0: java_lang_Long | bigint | number): UnionLayout | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    withByteAlignment?(var0: java_lang_Long | bigint | number): java_lang_foreign_MemoryLayout | null;
    /**
     * @return original return type: 'java.util.List'
     */
    memberLayouts(): java_util_List | null;
    /**
     * @param var0 original type: 'java.lang.foreign.MemoryLayout$PathElement[]'
     * @return original return type: 'long'
     */
    byteOffset?(var0: (java_lang_foreign_MemoryLayout$PathElement | JavaInterfaceProxy<java_lang_foreign_MemoryLayout$PathElementInterface> | null)[] | null): number;
    /**
     * @return original return type: 'int'
     */
    hashCode(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'long'
     */
    byteAlignment(): number;
    /**
     * @return original return type: 'java.util.Optional'
     */
    name(): java_util_Optional | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): string;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.GroupLayout'
     */
    withName?(var0: string | null): java_lang_foreign_GroupLayout | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    withName?(var0: string | null): java_lang_foreign_MemoryLayout | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.foreign.UnionLayout'
     */
    withName?(var0: string | null): UnionLayout | null;
    /**
     * @return original return type: 'java.lang.foreign.GroupLayout'
     */
    withoutName?(): java_lang_foreign_GroupLayout | null;
    /**
     * @return original return type: 'java.lang.foreign.MemoryLayout'
     */
    withoutName?(): java_lang_foreign_MemoryLayout | null;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @return original return type: 'java.lang.foreign.UnionLayout'
     */
    withoutName?(): UnionLayout | null;
}
/**
 * Create a proxy for the {@link UnionLayout} interface.
 * All required methods in {@link UnionLayoutInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createUnionLayoutProxy(methods: UnionLayoutInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<UnionLayoutInterface>;
declare const UnionLayout_base: typeof UnionLayoutClass;
/**
 * Class java.lang.foreign.UnionLayout.
 *
 * This actually imports the java class for further use.
 * The class {@link UnionLayoutClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class UnionLayout extends UnionLayout_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default UnionLayout;
//# sourceMappingURL=UnionLayout.d.ts.map