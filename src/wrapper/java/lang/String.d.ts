import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Class as java_lang_Class } from "./Class";
import { Integer as java_lang_Integer } from "./Integer";
import { CharSequence as java_lang_CharSequence, CharSequenceInterface as java_lang_CharSequenceInterface } from "./CharSequence";
import { MethodHandles$Lookup as java_lang_invoke_MethodHandles$Lookup } from "./invoke/MethodHandles$Lookup";
import { Optional as java_util_Optional } from "./../util/Optional";
import { Charset as java_nio_charset_Charset } from "./../nio/charset/Charset";
import { Locale as java_util_Locale } from "./../util/Locale";
import { Iterable as java_lang_Iterable, IterableInterface as java_lang_IterableInterface } from "./Iterable";
import { IntStream as java_util_stream_IntStream } from "./../util/stream/IntStream";
import { Long as java_lang_Long } from "./Long";
import { Boolean as java_lang_Boolean } from "./Boolean";
import { Function as java_util_function_Function, FunctionInterface as java_util_function_FunctionInterface } from "./../util/function/Function";
import { Stream as java_util_stream_Stream } from "./../util/stream/Stream";
import { Double as java_lang_Double } from "./Double";
import { Float as java_lang_Float } from "./Float";
import { StringBuffer as java_lang_StringBuffer } from "./StringBuffer";
import { Comparator as java_util_Comparator, ComparatorInterface as java_util_ComparatorInterface } from "./../util/Comparator";
import { StringBuilder as java_lang_StringBuilder } from "./StringBuilder";
/**
 * This class just defines types, you should import {@link String} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class StringClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'char[]'
     */
    toCharArray(): Promise<(string | null)[] | null>;
    /**
     * @return original return type: 'char[]'
     */
    toCharArraySync(): (string | null)[] | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    codePointAt(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    codePointAtSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    stripIndent(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    stripIndentSync(): string | null;
    /**
     * @param var0 original type: 'char'
     * @param var1 original type: 'char'
     * @return original return type: 'java.lang.String'
     */
    replace(var0: string | null, var1: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'char'
     * @param var1 original type: 'char'
     * @return original return type: 'java.lang.String'
     */
    replaceSync(var0: string | null, var1: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.lang.String'
     */
    replace(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.lang.CharSequence'
     * @return original return type: 'java.lang.String'
     */
    replaceSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    compareTo(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    compareToSync(var0: string | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.invoke.MethodHandles$Lookup'
     * @return original return type: 'java.lang.Object'
     */
    resolveConstantDesc(var0: java_lang_invoke_MethodHandles$Lookup | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.invoke.MethodHandles$Lookup'
     * @return original return type: 'java.lang.Object'
     */
    resolveConstantDescSync(var0: java_lang_invoke_MethodHandles$Lookup | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.invoke.MethodHandles$Lookup'
     * @return original return type: 'java.lang.String'
     */
    resolveConstantDesc(var0: java_lang_invoke_MethodHandles$Lookup | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.invoke.MethodHandles$Lookup'
     * @return original return type: 'java.lang.String'
     */
    resolveConstantDescSync(var0: java_lang_invoke_MethodHandles$Lookup | null): string | null;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstable(): Promise<java_util_Optional | null>;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstableSync(): java_util_Optional | null;
    /**
     * @param var0 original type: 'java.nio.charset.Charset'
     * @return original return type: 'byte[]'
     */
    getBytes(var0: java_nio_charset_Charset | null): Promise<Buffer | null>;
    /**
     * @param var0 original type: 'java.nio.charset.Charset'
     * @return original return type: 'byte[]'
     */
    getBytesSync(var0: java_nio_charset_Charset | null): Buffer | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'byte[]'
     */
    getBytes(var0: string | null): Promise<Buffer | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'byte[]'
     */
    getBytesSync(var0: string | null): Buffer | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'byte[]'
     * @param var3 original type: 'int'
     * @return original return type: 'void'
     */
    getBytes(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: Buffer | null, var3: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'byte[]'
     * @param var3 original type: 'int'
     * @return original return type: 'void'
     */
    getBytesSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: Buffer | null, var3: java_lang_Integer | number): void;
    /**
     * @return original return type: 'byte[]'
     */
    getBytes(): Promise<Buffer | null>;
    /**
     * @return original return type: 'byte[]'
     */
    getBytesSync(): Buffer | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String[]'
     */
    split(var0: string | null): Promise<(string | null)[] | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String[]'
     */
    splitSync(var0: string | null): (string | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String[]'
     */
    split(var0: string | null, var1: java_lang_Integer | number): Promise<(string | null)[] | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String[]'
     */
    splitSync(var0: string | null, var1: java_lang_Integer | number): (string | null)[] | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    strip(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    stripSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    trim(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    trimSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toUpperCase(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toUpperCaseSync(): string | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    toUpperCase(var0: java_util_Locale | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    toUpperCaseSync(var0: java_util_Locale | null): string | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.lang.CharSequence[]'
     * @return original return type: 'java.lang.String'
     */
    static join(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: (java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null)[] | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.lang.CharSequence[]'
     * @return original return type: 'java.lang.String'
     */
    static joinSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: (java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null)[] | null): string | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.lang.Iterable'
     * @return original return type: 'java.lang.String'
     */
    static join(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Iterable | JavaInterfaceProxy<java_lang_IterableInterface> | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'java.lang.Iterable'
     * @return original return type: 'java.lang.String'
     */
    static joinSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Iterable | JavaInterfaceProxy<java_lang_IterableInterface> | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    codePointBefore(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    codePointBeforeSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    equalsIgnoreCase(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    equalsIgnoreCaseSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    indexOf(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    indexOfSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    indexOf(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    indexOfSync(var0: string | null): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    indexOf(var0: string | null, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    indexOfSync(var0: string | null, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    indexOf(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    indexOfSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    compareToIgnoreCase(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    compareToIgnoreCaseSync(var0: string | null): number;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    codePoints(): Promise<java_util_stream_IntStream | null>;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    codePointsSync(): java_util_stream_IntStream | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toLowerCase(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    toLowerCaseSync(): string | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    toLowerCase(var0: java_util_Locale | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    toLowerCaseSync(var0: java_util_Locale | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.String'
     */
    static format(var0: string | null, var1: (BasicOrJavaType | null)[] | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.String'
     */
    static formatSync(var0: string | null, var1: (BasicOrJavaType | null)[] | null): string | null;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.String'
     */
    static format(var0: java_util_Locale | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.util.Locale'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.String'
     */
    static formatSync(var0: java_util_Locale | null, var1: string | null, var2: (BasicOrJavaType | null)[] | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    concat(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    concatSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    matches(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    matchesSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'boolean'
     */
    contains(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'boolean'
     */
    containsSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    endsWith(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    endsWithSync(var0: string | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    stripLeading(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    stripLeadingSync(): string | null;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    indent(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    indentSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.String'
     */
    formatted(var0: (BasicOrJavaType | null)[] | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.String'
     */
    formattedSync(var0: (BasicOrJavaType | null)[] | null): string | null;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'boolean'
     */
    regionMatches(var0: java_lang_Boolean | boolean, var1: java_lang_Integer | number, var2: string | null, var3: java_lang_Integer | number, var4: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'boolean'
     * @param var1 original type: 'int'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'boolean'
     */
    regionMatchesSync(var0: java_lang_Boolean | boolean, var1: java_lang_Integer | number, var2: string | null, var3: java_lang_Integer | number, var4: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'boolean'
     */
    regionMatches(var0: java_lang_Integer | number, var1: string | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'boolean'
     */
    regionMatchesSync(var0: java_lang_Integer | number, var1: string | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    replaceFirst(var0: string | null, var1: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    replaceFirstSync(var0: string | null, var1: string | null): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isBlank(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isBlankSync(): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    replaceAll(var0: string | null, var1: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    replaceAllSync(var0: string | null, var1: string | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    substring(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    substringSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    substring(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    substringSync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.Object'
     */
    transform(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.Object'
     */
    transformSync(var0: java_util_function_Function | JavaInterfaceProxy<java_util_function_FunctionInterface> | null): BasicOrJavaType | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    repeat(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    repeatSync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    lines(): Promise<java_util_stream_Stream | null>;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    linesSync(): java_util_stream_Stream | null;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static copyValueOf(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static copyValueOfSync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'char[]'
     * @return original return type: 'java.lang.String'
     */
    static copyValueOf(var0: (string | null)[] | null): Promise<string | null>;
    /**
     * @param var0 original type: 'char[]'
     * @return original return type: 'java.lang.String'
     */
    static copyValueOfSync(var0: (string | null)[] | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    codePointCount(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    codePointCountSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    translateEscapes(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    translateEscapesSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    intern(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    internSync(): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'char[]'
     * @param var3 original type: 'int'
     * @return original return type: 'void'
     */
    getChars(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (string | null)[] | null, var3: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'char[]'
     * @param var3 original type: 'int'
     * @return original return type: 'void'
     */
    getCharsSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (string | null)[] | null, var3: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static valueOf(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static valueOfSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'char[]'
     * @return original return type: 'java.lang.String'
     */
    static valueOf(var0: (string | null)[] | null): Promise<string | null>;
    /**
     * @param var0 original type: 'char[]'
     * @return original return type: 'java.lang.String'
     */
    static valueOfSync(var0: (string | null)[] | null): string | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.String'
     */
    static valueOf(var0: BasicOrJavaType | null): Promise<string | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.String'
     */
    static valueOfSync(var0: BasicOrJavaType | null): string | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.lang.String'
     */
    static valueOf(var0: java_lang_Boolean | boolean): Promise<string | null>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.lang.String'
     */
    static valueOfSync(var0: java_lang_Boolean | boolean): string | null;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static valueOf(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static valueOfSync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'java.lang.String'
     */
    static valueOf(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'java.lang.String'
     */
    static valueOfSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.lang.String'
     */
    static valueOf(var0: java_lang_Double | number): Promise<string | null>;
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.lang.String'
     */
    static valueOfSync(var0: java_lang_Double | number): string | null;
    /**
     * @param var0 original type: 'float'
     * @return original return type: 'java.lang.String'
     */
    static valueOf(var0: java_lang_Float | number): Promise<string | null>;
    /**
     * @param var0 original type: 'float'
     * @return original return type: 'java.lang.String'
     */
    static valueOfSync(var0: java_lang_Float | number): string | null;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    static valueOf(var0: java_lang_Long | bigint | number): Promise<string | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.lang.String'
     */
    static valueOfSync(var0: java_lang_Long | bigint | number): string | null;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'boolean'
     */
    contentEquals(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @return original return type: 'boolean'
     */
    contentEqualsSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null): boolean;
    /**
     * @param var0 original type: 'java.lang.StringBuffer'
     * @return original return type: 'boolean'
     */
    contentEquals(var0: java_lang_StringBuffer | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.StringBuffer'
     * @return original return type: 'boolean'
     */
    contentEqualsSync(var0: java_lang_StringBuffer | null): boolean;
    /**
     * @return original return type: 'int'
     */
    length(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    lengthSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isEmpty(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isEmptySync(): boolean;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.CharSequence'
     */
    subSequence(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<java_lang_CharSequence | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.CharSequence'
     */
    subSequenceSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): java_lang_CharSequence | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    lastIndexOf(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    lastIndexOfSync(var0: string | null): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    lastIndexOf(var0: string | null, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    lastIndexOfSync(var0: string | null, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    lastIndexOf(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    lastIndexOfSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    lastIndexOf(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    lastIndexOfSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    charAt(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    charAtSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    offsetByCodePoints(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    offsetByCodePointsSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): number;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    chars(): Promise<java_util_stream_IntStream | null>;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    charsSync(): java_util_stream_IntStream | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'boolean'
     */
    startsWith(var0: string | null, var1: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'int'
     * @return original return type: 'boolean'
     */
    startsWithSync(var0: string | null, var1: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    startsWith(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    startsWithSync(var0: string | null): boolean;
    /**
     * @return original return type: 'java.lang.String'
     */
    stripTrailing(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    stripTrailingSync(): string | null;
    /**
     * Original type: 'java.util.Comparator'
     */
    static readonly CASE_INSENSITIVE_ORDER: java_util_Comparator | JavaInterfaceProxy<java_util_ComparatorInterface> | null;
    /**
     * @param var0 original type: 'java.lang.StringBuffer'
     */
    constructor(var0: java_lang_StringBuffer | null);
    /**
     * @param var0 original type: 'java.lang.StringBuffer'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: java_lang_StringBuffer | null): Promise<string>;
    /**
     * @param var0 original type: 'java.lang.StringBuilder'
     */
    constructor(var0: java_lang_StringBuilder | null);
    /**
     * @param var0 original type: 'java.lang.StringBuilder'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: java_lang_StringBuilder | null): Promise<string>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.nio.charset.Charset'
     */
    constructor(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_nio_charset_Charset | null);
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.nio.charset.Charset'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_nio_charset_Charset | null): Promise<string>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'java.lang.String'
     */
    constructor(var0: Buffer | null, var1: string | null);
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: Buffer | null, var1: string | null): Promise<string>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'java.nio.charset.Charset'
     */
    constructor(var0: Buffer | null, var1: java_nio_charset_Charset | null);
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'java.nio.charset.Charset'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: Buffer | null, var1: java_nio_charset_Charset | null): Promise<string>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     */
    constructor(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number);
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<string>;
    /**
     * @param var0 original type: 'byte[]'
     */
    constructor(var0: Buffer | null);
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: Buffer | null): Promise<string>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     */
    constructor(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number);
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<string>;
    /**
     * @param var0 original type: 'char[]'
     */
    constructor(var0: (string | null)[] | null);
    /**
     * @param var0 original type: 'char[]'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: (string | null)[] | null): Promise<string>;
    /**
     * @param var0 original type: 'java.lang.String'
     */
    constructor(var0: string | null);
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: string | null): Promise<string>;
    constructor();
    /**
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(): Promise<string>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.lang.String'
     */
    constructor(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: string | null);
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'java.lang.String'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: string | null): Promise<string>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     */
    constructor(var0: Buffer | null, var1: java_lang_Integer | number);
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: Buffer | null, var1: java_lang_Integer | number): Promise<string>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     */
    constructor(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number);
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<string>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     */
    constructor(var0: (java_lang_Integer | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number);
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static newInstanceAsync(var0: (java_lang_Integer | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<string>;
}
declare const String_base: typeof StringClass;
/**
 * Class java.lang.String.
 *
 * This actually imports the java class for further use.
 * The class {@link StringClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class String extends String_base {
}
export default String;
