import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { ThreadFactory as java_util_concurrent_ThreadFactory } from "./../util/concurrent/ThreadFactory";
import { Boolean as java_lang_Boolean } from "./Boolean";
import { Long as java_lang_Long } from "./Long";
import { Thread as java_lang_Thread } from "./Thread";
import { Runnable as java_lang_Runnable, RunnableInterface as java_lang_RunnableInterface } from "./Runnable";
import { Thread$UncaughtExceptionHandler as java_lang_Thread$UncaughtExceptionHandler, Thread$UncaughtExceptionHandlerInterface as java_lang_Thread$UncaughtExceptionHandlerInterface } from "./Thread$UncaughtExceptionHandler";
/**
 * This class just defines types, you should import {@link Thread$Builder} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Thread$BuilderClass extends JavaClass {
    /**
     * @return original return type: 'java.util.concurrent.ThreadFactory'
     */
    factory(): Promise<java_util_concurrent_ThreadFactory | null>;
    /**
     * @return original return type: 'java.util.concurrent.ThreadFactory'
     */
    factorySync(): java_util_concurrent_ThreadFactory | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    inheritInheritableThreadLocals(var0: java_lang_Boolean | boolean): Promise<Thread$Builder | null>;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    inheritInheritableThreadLocalsSync(var0: java_lang_Boolean | boolean): Thread$Builder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    name(var0: string | null): Promise<Thread$Builder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    nameSync(var0: string | null): Thread$Builder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    name(var0: string | null, var1: java_lang_Long | bigint | number): Promise<Thread$Builder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    nameSync(var0: string | null, var1: java_lang_Long | bigint | number): Thread$Builder | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.lang.Thread'
     */
    start(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): Promise<java_lang_Thread | null>;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.lang.Thread'
     */
    startSync(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): java_lang_Thread | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.lang.Thread'
     */
    unstarted(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): Promise<java_lang_Thread | null>;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.lang.Thread'
     */
    unstartedSync(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): java_lang_Thread | null;
    /**
     * @param var0 original type: 'java.lang.Thread$UncaughtExceptionHandler'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    uncaughtExceptionHandler(var0: java_lang_Thread$UncaughtExceptionHandler | JavaInterfaceProxy<java_lang_Thread$UncaughtExceptionHandlerInterface> | null): Promise<Thread$Builder | null>;
    /**
     * @param var0 original type: 'java.lang.Thread$UncaughtExceptionHandler'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    uncaughtExceptionHandlerSync(var0: java_lang_Thread$UncaughtExceptionHandler | JavaInterfaceProxy<java_lang_Thread$UncaughtExceptionHandlerInterface> | null): Thread$Builder | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createThread$BuilderProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface Thread$BuilderInterface {
    /**
     * @return original return type: 'java.util.concurrent.ThreadFactory'
     */
    factory(): java_util_concurrent_ThreadFactory | null;
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    inheritInheritableThreadLocals(var0: java_lang_Boolean | boolean): Thread$Builder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    name(var0: string | null): Thread$Builder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'long'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    name(var0: string | null, var1: java_lang_Long | bigint | number): Thread$Builder | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.lang.Thread'
     */
    start(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): java_lang_Thread | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.lang.Thread'
     */
    unstarted(var0: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): java_lang_Thread | null;
    /**
     * @param var0 original type: 'java.lang.Thread$UncaughtExceptionHandler'
     * @return original return type: 'java.lang.Thread$Builder'
     */
    uncaughtExceptionHandler(var0: java_lang_Thread$UncaughtExceptionHandler | JavaInterfaceProxy<java_lang_Thread$UncaughtExceptionHandlerInterface> | null): Thread$Builder | null;
}
/**
 * Create a proxy for the {@link Thread$Builder} interface.
 * All required methods in {@link Thread$BuilderInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createThread$BuilderProxy(methods: Thread$BuilderInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<Thread$BuilderInterface>;
declare const Thread$Builder_base: typeof Thread$BuilderClass;
/**
 * Class java.lang.Thread$Builder.
 *
 * This actually imports the java class for further use.
 * The class {@link Thread$BuilderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Thread$Builder extends Thread$Builder_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Thread$Builder;
//# sourceMappingURL=Thread$Builder.d.ts.map