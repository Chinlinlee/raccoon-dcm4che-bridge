import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Class as java_lang_Class } from "./../Class";
import { Long as java_lang_Long } from "./../Long";
import { Integer as java_lang_Integer } from "./../Integer";
import { ThreadFactory as java_util_concurrent_ThreadFactory, ThreadFactoryInterface as java_util_concurrent_ThreadFactoryInterface } from "./../../util/concurrent/ThreadFactory";
import { Cleaner$Cleanable as java_lang_ref_Cleaner$Cleanable } from "./Cleaner$Cleanable";
import { Runnable as java_lang_Runnable, RunnableInterface as java_lang_RunnableInterface } from "./../Runnable";
/**
 * This class just defines types, you should import {@link Cleaner} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CleanerClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @return original return type: 'java.lang.ref.Cleaner'
     */
    static create(): Promise<Cleaner | null>;
    /**
     * @return original return type: 'java.lang.ref.Cleaner'
     */
    static createSync(): Cleaner | null;
    /**
     * @param var0 original type: 'java.util.concurrent.ThreadFactory'
     * @return original return type: 'java.lang.ref.Cleaner'
     */
    static create(var0: java_util_concurrent_ThreadFactory | JavaInterfaceProxy<java_util_concurrent_ThreadFactoryInterface> | null): Promise<Cleaner | null>;
    /**
     * @param var0 original type: 'java.util.concurrent.ThreadFactory'
     * @return original return type: 'java.lang.ref.Cleaner'
     */
    static createSync(var0: java_util_concurrent_ThreadFactory | JavaInterfaceProxy<java_util_concurrent_ThreadFactoryInterface> | null): Cleaner | null;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Runnable'
     * @return original return type: 'java.lang.ref.Cleaner$Cleanable'
     */
    register(var0: BasicOrJavaType | null, var1: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): Promise<java_lang_ref_Cleaner$Cleanable | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Runnable'
     * @return original return type: 'java.lang.ref.Cleaner$Cleanable'
     */
    registerSync(var0: BasicOrJavaType | null, var1: java_lang_Runnable | JavaInterfaceProxy<java_lang_RunnableInterface> | null): java_lang_ref_Cleaner$Cleanable | null;
}
declare const Cleaner_base: typeof CleanerClass;
/**
 * Class java.lang.ref.Cleaner.
 *
 * This actually imports the java class for further use.
 * The class {@link CleanerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Cleaner extends Cleaner_base {
}
export default Cleaner;
