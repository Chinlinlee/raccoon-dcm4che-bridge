import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Class as java_lang_Class } from "./Class";
import { Integer as java_lang_Integer } from "./Integer";
import { CharSequence as java_lang_CharSequence, CharSequenceInterface as java_lang_CharSequenceInterface } from "./CharSequence";
import { Optional as java_util_Optional } from "./../util/Optional";
import { Long as java_lang_Long } from "./Long";
import { Byte as java_lang_Byte } from "./Byte";
/**
 * This class just defines types, you should import {@link Character} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CharacterClass extends JavaClass {
    /**
     * @param var0 original type: 'char'
     * @param var1 original type: 'char'
     * @return original return type: 'int'
     */
    static toCodePoint(var0: string | null, var1: string | null): Promise<number>;
    /**
     * @param var0 original type: 'char'
     * @param var1 original type: 'char'
     * @return original return type: 'int'
     */
    static toCodePointSync(var0: string | null, var1: string | null): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static getName(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static getNameSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointAt(var0: (string | null)[] | null, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointAtSync(var0: (string | null)[] | null, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointAt(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointAtSync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointAt(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointAtSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    compareToSync(var0: BasicOrJavaType | null): number;
    /**
     * @param var0 original type: 'java.lang.Character'
     * @return original return type: 'int'
     */
    compareTo(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Character'
     * @return original return type: 'int'
     */
    compareToSync(var0: string | null): number;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstable(): Promise<java_util_Optional | null>;
    /**
     * @return original return type: 'java.util.Optional'
     */
    describeConstableSync(): java_util_Optional | null;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isJavaLetter(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isJavaLetterSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isSpace(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isSpaceSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isJavaIdentifierPart(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isJavaIdentifierPartSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isJavaIdentifierPart(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isJavaIdentifierPartSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'char'
     */
    static toUpperCase(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'char'
     */
    static toUpperCaseSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static toUpperCase(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static toUpperCaseSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isIdentifierIgnorable(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isIdentifierIgnorableSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isIdentifierIgnorable(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isIdentifierIgnorableSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointBefore(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointBeforeSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointBefore(var0: (string | null)[] | null, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointBeforeSync(var0: (string | null)[] | null, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointBefore(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointBeforeSync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static digit(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static digitSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'char'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static digit(var0: string | null, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'char'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static digitSync(var0: string | null, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isSupplementaryCodePoint(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isSupplementaryCodePointSync(var0: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'char'
     */
    charValue(): Promise<string | null>;
    /**
     * @return original return type: 'char'
     */
    charValueSync(): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isUnicodeIdentifierPart(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isUnicodeIdentifierPartSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isUnicodeIdentifierPart(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isUnicodeIdentifierPartSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static toLowerCase(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static toLowerCaseSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'char'
     */
    static toLowerCase(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'char'
     */
    static toLowerCaseSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isSpaceChar(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isSpaceCharSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isSpaceChar(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isSpaceCharSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isWhitespace(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isWhitespaceSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isWhitespace(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isWhitespaceSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    static highSurrogate(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    static highSurrogateSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isLetterOrDigit(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isLetterOrDigitSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isLetterOrDigit(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isLetterOrDigitSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'int'
     */
    static getType(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'int'
     */
    static getTypeSync(var0: string | null): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static getType(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static getTypeSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isDigit(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isDigitSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isDigit(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isDigitSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isValidCodePoint(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isValidCodePointSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'char'
     */
    static reverseBytes(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'char'
     */
    static reverseBytesSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char[]'
     */
    static toChars(var0: java_lang_Integer | number): Promise<(string | null)[] | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char[]'
     */
    static toCharsSync(var0: java_lang_Integer | number): (string | null)[] | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'char[]'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static toChars(var0: java_lang_Integer | number, var1: (string | null)[] | null, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'char[]'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static toCharsSync(var0: java_lang_Integer | number, var1: (string | null)[] | null, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'char'
     * @param var1 original type: 'char'
     * @return original return type: 'int'
     */
    static compare(var0: string | null, var1: string | null): Promise<number>;
    /**
     * @param var0 original type: 'char'
     * @param var1 original type: 'char'
     * @return original return type: 'int'
     */
    static compareSync(var0: string | null, var1: string | null): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static charCount(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static charCountSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isLowerCase(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isLowerCaseSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isLowerCase(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isLowerCaseSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static getNumericValue(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static getNumericValueSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'int'
     */
    static getNumericValue(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'int'
     */
    static getNumericValueSync(var0: string | null): number;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isISOControl(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isISOControlSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isISOControl(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isISOControlSync(var0: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'char'
     * @param var1 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isSurrogatePair(var0: string | null, var1: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @param var1 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isSurrogatePairSync(var0: string | null, var1: string | null): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isLetter(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isLetterSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isLetter(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isLetterSync(var0: java_lang_Integer | number): boolean;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isAlphabetic(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isAlphabeticSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'int'
     */
    static hashCode(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'int'
     */
    static hashCodeSync(var0: string | null): number;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    static lowSurrogate(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'char'
     */
    static lowSurrogateSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isJavaLetterOrDigit(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isJavaLetterOrDigitSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointCount(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointCountSync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointCount(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static codePointCountSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isUnicodeIdentifierStart(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isUnicodeIdentifierStartSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isUnicodeIdentifierStart(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isUnicodeIdentifierStartSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'byte'
     */
    static getDirectionality(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'byte'
     */
    static getDirectionalitySync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'byte'
     */
    static getDirectionality(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'byte'
     */
    static getDirectionalitySync(var0: string | null): number;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isMirrored(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isMirroredSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isMirrored(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isMirroredSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isJavaIdentifierStart(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isJavaIdentifierStartSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isJavaIdentifierStart(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isJavaIdentifierStartSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'java.lang.Character'
     */
    static valueOf(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'java.lang.Character'
     */
    static valueOfSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'char'
     */
    static forDigit(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'char'
     */
    static forDigitSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isUpperCase(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isUpperCaseSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isUpperCase(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isUpperCaseSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isHighSurrogate(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isHighSurrogateSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    static codePointOf(var0: string | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'int'
     */
    static codePointOfSync(var0: string | null): number;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isSurrogate(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isSurrogateSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isIdeographic(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isIdeographicSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isTitleCase(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isTitleCaseSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isTitleCase(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isTitleCaseSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isDefined(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isDefinedSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isDefined(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isDefinedSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isBmpCodePoint(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isBmpCodePointSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static toTitleCase(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static toTitleCaseSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'char'
     */
    static toTitleCase(var0: string | null): Promise<string | null>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'char'
     */
    static toTitleCaseSync(var0: string | null): string | null;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isLowSurrogate(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'boolean'
     */
    static isLowSurrogateSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static offsetByCodePoints(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.CharSequence'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'int'
     */
    static offsetByCodePointsSync(var0: java_lang_CharSequence | JavaInterfaceProxy<java_lang_CharSequenceInterface> | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'int'
     */
    static offsetByCodePoints(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'char[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'int'
     */
    static offsetByCodePointsSync(var0: (string | null)[] | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number, var4: java_lang_Integer | number): number;
    /**
     * Original type: 'char'
     */
    static readonly MAX_SURROGATE: string | null;
    /**
     * Original type: 'int'
     */
    static readonly BYTES: java_lang_Integer | number;
    /**
     * Original type: 'byte'
     */
    static readonly LOWERCASE_LETTER: java_lang_Byte | number;
    /**
     * Original type: 'char'
     */
    static readonly MIN_LOW_SURROGATE: string | null;
    /**
     * Original type: 'byte'
     */
    static readonly FORMAT: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_FIRST_STRONG_ISOLATE: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly MODIFIER_LETTER: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly OTHER_NUMBER: java_lang_Byte | number;
    /**
     * Original type: 'int'
     */
    static readonly MAX_RADIX: java_lang_Integer | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_RIGHT_TO_LEFT: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly MODIFIER_SYMBOL: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DASH_PUNCTUATION: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DECIMAL_DIGIT_NUMBER: java_lang_Byte | number;
    /**
     * Original type: 'char'
     */
    static readonly MAX_LOW_SURROGATE: string | null;
    /**
     * Original type: 'java.lang.Class'
     */
    static readonly TYPE: java_lang_Class | null;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_POP_DIRECTIONAL_FORMAT: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_COMMON_NUMBER_SEPARATOR: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_EUROPEAN_NUMBER: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_BOUNDARY_NEUTRAL: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly LINE_SEPARATOR: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly SURROGATE: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR: java_lang_Byte | number;
    /**
     * Original type: 'int'
     */
    static readonly MIN_CODE_POINT: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly SIZE: java_lang_Integer | number;
    /**
     * Original type: 'byte'
     */
    static readonly TITLECASE_LETTER: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly START_PUNCTUATION: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly UPPERCASE_LETTER: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_NONSPACING_MARK: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly UNASSIGNED: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_WHITESPACE: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_UNDEFINED: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly ENCLOSING_MARK: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_OTHER_NEUTRALS: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE: java_lang_Byte | number;
    /**
     * Original type: 'int'
     */
    static readonly MIN_RADIX: java_lang_Integer | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_SEGMENT_SEPARATOR: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly CONNECTOR_PUNCTUATION: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly CONTROL: java_lang_Byte | number;
    /**
     * Original type: 'int'
     */
    static readonly MAX_CODE_POINT: java_lang_Integer | number;
    /**
     * Original type: 'byte'
     */
    static readonly CURRENCY_SYMBOL: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly PARAGRAPH_SEPARATOR: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_ARABIC_NUMBER: java_lang_Byte | number;
    /**
     * Original type: 'char'
     */
    static readonly MAX_VALUE: string | null;
    /**
     * Original type: 'byte'
     */
    static readonly END_PUNCTUATION: java_lang_Byte | number;
    /**
     * Original type: 'int'
     */
    static readonly MIN_SUPPLEMENTARY_CODE_POINT: java_lang_Integer | number;
    /**
     * Original type: 'byte'
     */
    static readonly FINAL_QUOTE_PUNCTUATION: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly SPACE_SEPARATOR: java_lang_Byte | number;
    /**
     * Original type: 'char'
     */
    static readonly MIN_HIGH_SURROGATE: string | null;
    /**
     * Original type: 'byte'
     */
    static readonly LETTER_NUMBER: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly PRIVATE_USE: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly NON_SPACING_MARK: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_PARAGRAPH_SEPARATOR: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE: java_lang_Byte | number;
    /**
     * Original type: 'char'
     */
    static readonly MIN_VALUE: string | null;
    /**
     * Original type: 'byte'
     */
    static readonly COMBINING_SPACING_MARK: java_lang_Byte | number;
    /**
     * Original type: 'char'
     */
    static readonly MIN_SURROGATE: string | null;
    /**
     * Original type: 'byte'
     */
    static readonly INITIAL_QUOTE_PUNCTUATION: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly OTHER_PUNCTUATION: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly OTHER_SYMBOL: java_lang_Byte | number;
    /**
     * Original type: 'char'
     */
    static readonly MAX_HIGH_SURROGATE: string | null;
    /**
     * Original type: 'byte'
     */
    static readonly DIRECTIONALITY_LEFT_TO_RIGHT: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly MATH_SYMBOL: java_lang_Byte | number;
    /**
     * Original type: 'byte'
     */
    static readonly OTHER_LETTER: java_lang_Byte | number;
    /**
     * @param var0 original type: 'char'
     */
    constructor(var0: string | null);
    /**
     * @param var0 original type: 'char'
     * @return original return type: 'java.lang.Character'
     */
    static newInstanceAsync(var0: string | null): Promise<string>;
}
declare const Character_base: typeof CharacterClass;
/**
 * Class java.lang.Character.
 *
 * This actually imports the java class for further use.
 * The class {@link CharacterClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Character extends Character_base {
}
export default Character;
//# sourceMappingURL=Character.d.ts.map