import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { JsonObject as jakarta_json_JsonObject, JsonObjectInterface as jakarta_json_JsonObjectInterface } from "./JsonObject";
import { CharSequence as java_lang_CharSequence } from "./../../java/lang/CharSequence";
import { JsonArray as jakarta_json_JsonArray, JsonArrayInterface as jakarta_json_JsonArrayInterface } from "./JsonArray";
import { JsonValue$ValueType as jakarta_json_JsonValue$ValueType } from "./JsonValue$ValueType";
import { JsonValue as jakarta_json_JsonValue, JsonValueInterface as jakarta_json_JsonValueInterface } from "./JsonValue";
/**
 * This class just defines types, you should import {@link JsonString} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonStringClass extends JavaClass {
    /**
     * @return original return type: 'jakarta.json.JsonObject'
     */
    asJsonObject(): Promise<jakarta_json_JsonObject | null>;
    /**
     * @return original return type: 'jakarta.json.JsonObject'
     */
    asJsonObjectSync(): jakarta_json_JsonObject | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.CharSequence'
     */
    getChars(): Promise<java_lang_CharSequence | null>;
    /**
     * @return original return type: 'java.lang.CharSequence'
     */
    getCharsSync(): java_lang_CharSequence | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'jakarta.json.JsonArray'
     */
    asJsonArray(): Promise<jakarta_json_JsonArray | null>;
    /**
     * @return original return type: 'jakarta.json.JsonArray'
     */
    asJsonArraySync(): jakarta_json_JsonArray | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getString(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getStringSync(): string | null;
    /**
     * @return original return type: 'jakarta.json.JsonValue$ValueType'
     */
    getValueType(): Promise<jakarta_json_JsonValue$ValueType | null>;
    /**
     * @return original return type: 'jakarta.json.JsonValue$ValueType'
     */
    getValueTypeSync(): jakarta_json_JsonValue$ValueType | null;
    /**
     * Original type: 'jakarta.json.JsonValue'
     */
    static readonly NULL: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null;
    /**
     * Original type: 'jakarta.json.JsonObject'
     */
    static readonly EMPTY_JSON_OBJECT: jakarta_json_JsonObject | JavaInterfaceProxy<jakarta_json_JsonObjectInterface> | null;
    /**
     * Original type: 'jakarta.json.JsonArray'
     */
    static readonly EMPTY_JSON_ARRAY: jakarta_json_JsonArray | JavaInterfaceProxy<jakarta_json_JsonArrayInterface> | null;
    /**
     * Original type: 'jakarta.json.JsonValue'
     */
    static readonly TRUE: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null;
    /**
     * Original type: 'jakarta.json.JsonValue'
     */
    static readonly FALSE: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonStringProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonStringInterface {
    /**
     * @return original return type: 'jakarta.json.JsonObject'
     */
    asJsonObject?(): jakarta_json_JsonObject | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): number;
    /**
     * @return original return type: 'java.lang.CharSequence'
     */
    getChars(): java_lang_CharSequence | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'jakarta.json.JsonArray'
     */
    asJsonArray?(): jakarta_json_JsonArray | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): string;
    /**
     * @return original return type: 'java.lang.String'
     */
    getString(): string | null;
    /**
     * @return original return type: 'jakarta.json.JsonValue$ValueType'
     */
    getValueType(): jakarta_json_JsonValue$ValueType | null;
}
/**
 * Create a proxy for the {@link JsonString} interface.
 * All required methods in {@link JsonStringInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonStringProxy(methods: JsonStringInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonStringInterface>;
declare const JsonString_base: typeof JsonStringClass;
/**
 * Class jakarta.json.JsonString.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonStringClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonString extends JsonString_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonString;
