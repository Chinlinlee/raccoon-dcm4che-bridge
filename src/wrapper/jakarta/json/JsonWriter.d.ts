import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { JsonArray as jakarta_json_JsonArray, JsonArrayInterface as jakarta_json_JsonArrayInterface } from "./JsonArray";
import { JsonObject as jakarta_json_JsonObject, JsonObjectInterface as jakarta_json_JsonObjectInterface } from "./JsonObject";
import { JsonValue as jakarta_json_JsonValue, JsonValueInterface as jakarta_json_JsonValueInterface } from "./JsonValue";
import { JsonStructure as jakarta_json_JsonStructure, JsonStructureInterface as jakarta_json_JsonStructureInterface } from "./JsonStructure";
/**
 * This class just defines types, you should import {@link JsonWriter} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonWriterClass extends JavaClass {
    /**
     * @param var0 original type: 'jakarta.json.JsonArray'
     * @return original return type: 'void'
     */
    writeArray(var0: jakarta_json_JsonArray | JavaInterfaceProxy<jakarta_json_JsonArrayInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'jakarta.json.JsonArray'
     * @return original return type: 'void'
     */
    writeArraySync(var0: jakarta_json_JsonArray | JavaInterfaceProxy<jakarta_json_JsonArrayInterface> | null): void;
    /**
     * @param var0 original type: 'jakarta.json.JsonObject'
     * @return original return type: 'void'
     */
    writeObject(var0: jakarta_json_JsonObject | JavaInterfaceProxy<jakarta_json_JsonObjectInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'jakarta.json.JsonObject'
     * @return original return type: 'void'
     */
    writeObjectSync(var0: jakarta_json_JsonObject | JavaInterfaceProxy<jakarta_json_JsonObjectInterface> | null): void;
    /**
     * @param var0 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'void'
     */
    write(var0: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'void'
     */
    writeSync(var0: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): void;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'void'
     */
    write(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'void'
     */
    writeSync(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): void;
    /**
     * @return original return type: 'void'
     */
    close(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    closeSync(): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonWriterProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonWriterInterface {
    /**
     * @param var0 original type: 'jakarta.json.JsonArray'
     * @return original return type: 'void'
     */
    writeArray(var0: jakarta_json_JsonArray | JavaInterfaceProxy<jakarta_json_JsonArrayInterface> | null): void;
    /**
     * @param var0 original type: 'jakarta.json.JsonObject'
     * @return original return type: 'void'
     */
    writeObject(var0: jakarta_json_JsonObject | JavaInterfaceProxy<jakarta_json_JsonObjectInterface> | null): void;
    /**
     * @param var0 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'void'
     */
    write?(var0: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): void;
    /**
     * **Note: Although this method is marked as optional, it actually must be implemented.**
     *
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'void'
     */
    write?(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): void;
    /**
     * @return original return type: 'void'
     */
    close(): void;
}
/**
 * Create a proxy for the {@link JsonWriter} interface.
 * All required methods in {@link JsonWriterInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonWriterProxy(methods: JsonWriterInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonWriterInterface>;
declare const JsonWriter_base: typeof JsonWriterClass;
/**
 * Class jakarta.json.JsonWriter.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonWriterClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonWriter extends JsonWriter_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonWriter;
