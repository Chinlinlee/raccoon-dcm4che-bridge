import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { JsonStructure as jakarta_json_JsonStructure, JsonStructureInterface as jakarta_json_JsonStructureInterface } from "./JsonStructure";
import { JsonValue as jakarta_json_JsonValue, JsonValueInterface as jakarta_json_JsonValueInterface } from "./JsonValue";
/**
 * This class just defines types, you should import {@link JsonPointer} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonPointerClass extends JavaClass {
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @param var1 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'jakarta.json.JsonStructure'
     */
    add(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null, var1: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): Promise<jakarta_json_JsonStructure | null>;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @param var1 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'jakarta.json.JsonStructure'
     */
    addSync(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null, var1: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): jakarta_json_JsonStructure | null;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'jakarta.json.JsonStructure'
     */
    remove(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): Promise<jakarta_json_JsonStructure | null>;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'jakarta.json.JsonStructure'
     */
    removeSync(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): jakarta_json_JsonStructure | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): string;
    /**
     * @return original return type: 'java.lang.String'
     */
    toStringSync(): string;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'jakarta.json.JsonValue'
     */
    getValue(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): Promise<jakarta_json_JsonValue | null>;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'jakarta.json.JsonValue'
     */
    getValueSync(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): jakarta_json_JsonValue | null;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @param var1 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'jakarta.json.JsonStructure'
     */
    replace(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null, var1: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): Promise<jakarta_json_JsonStructure | null>;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @param var1 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'jakarta.json.JsonStructure'
     */
    replaceSync(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null, var1: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): jakarta_json_JsonStructure | null;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'boolean'
     */
    containsValue(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): Promise<boolean>;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'boolean'
     */
    containsValueSync(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): boolean;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonPointerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonPointerInterface {
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @param var1 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'jakarta.json.JsonStructure'
     */
    add(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null, var1: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): jakarta_json_JsonStructure | null;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'jakarta.json.JsonStructure'
     */
    remove(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): jakarta_json_JsonStructure | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    toString(): string;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'jakarta.json.JsonValue'
     */
    getValue(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): jakarta_json_JsonValue | null;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @param var1 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'jakarta.json.JsonStructure'
     */
    replace(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null, var1: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): jakarta_json_JsonStructure | null;
    /**
     * @param var0 original type: 'jakarta.json.JsonStructure'
     * @return original return type: 'boolean'
     */
    containsValue(var0: jakarta_json_JsonStructure | JavaInterfaceProxy<jakarta_json_JsonStructureInterface> | null): boolean;
}
/**
 * Create a proxy for the {@link JsonPointer} interface.
 * All required methods in {@link JsonPointerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonPointerProxy(methods: JsonPointerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonPointerInterface>;
declare const JsonPointer_base: typeof JsonPointerClass;
/**
 * Class jakarta.json.JsonPointer.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonPointerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonPointer extends JsonPointer_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonPointer;
//# sourceMappingURL=JsonPointer.d.ts.map