import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { JsonValue as jakarta_json_JsonValue, JsonValueInterface as jakarta_json_JsonValueInterface } from "./JsonValue";
/**
 * This class just defines types, you should import {@link JsonMergePatch} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonMergePatchClass extends JavaClass {
    /**
     * @return original return type: 'jakarta.json.JsonValue'
     */
    toJsonValue(): Promise<jakarta_json_JsonValue | null>;
    /**
     * @return original return type: 'jakarta.json.JsonValue'
     */
    toJsonValueSync(): jakarta_json_JsonValue | null;
    /**
     * @param var0 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'jakarta.json.JsonValue'
     */
    apply(var0: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): Promise<jakarta_json_JsonValue | null>;
    /**
     * @param var0 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'jakarta.json.JsonValue'
     */
    applySync(var0: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): jakarta_json_JsonValue | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createJsonMergePatchProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface JsonMergePatchInterface {
    /**
     * @return original return type: 'jakarta.json.JsonValue'
     */
    toJsonValue(): jakarta_json_JsonValue | null;
    /**
     * @param var0 original type: 'jakarta.json.JsonValue'
     * @return original return type: 'jakarta.json.JsonValue'
     */
    apply(var0: jakarta_json_JsonValue | JavaInterfaceProxy<jakarta_json_JsonValueInterface> | null): jakarta_json_JsonValue | null;
}
/**
 * Create a proxy for the {@link JsonMergePatch} interface.
 * All required methods in {@link JsonMergePatchInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createJsonMergePatchProxy(methods: JsonMergePatchInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<JsonMergePatchInterface>;
declare const JsonMergePatch_base: typeof JsonMergePatchClass;
/**
 * Class jakarta.json.JsonMergePatch.
 *
 * This actually imports the java class for further use.
 * The class {@link JsonMergePatchClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class JsonMergePatch extends JsonMergePatch_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default JsonMergePatch;
