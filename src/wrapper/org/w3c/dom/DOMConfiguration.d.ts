import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { DOMStringList as org_w3c_dom_DOMStringList } from "./DOMStringList";
/**
 * This class just defines types, you should import {@link DOMConfiguration} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DOMConfigurationClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setParameter(var0: string | null, var1: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setParameterSync(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @return original return type: 'org.w3c.dom.DOMStringList'
     */
    getParameterNames(): Promise<org_w3c_dom_DOMStringList | null>;
    /**
     * @return original return type: 'org.w3c.dom.DOMStringList'
     */
    getParameterNamesSync(): org_w3c_dom_DOMStringList | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    canSetParameter(var0: string | null, var1: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    canSetParameterSync(var0: string | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getParameter(var0: string | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getParameterSync(var0: string | null): BasicOrJavaType | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createDOMConfigurationProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface DOMConfigurationInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setParameter(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @return original return type: 'org.w3c.dom.DOMStringList'
     */
    getParameterNames(): org_w3c_dom_DOMStringList | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    canSetParameter(var0: string | null, var1: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Object'
     */
    getParameter(var0: string | null): BasicOrJavaType | null;
}
/**
 * Create a proxy for the {@link DOMConfiguration} interface.
 * All required methods in {@link DOMConfigurationInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createDOMConfigurationProxy(methods: DOMConfigurationInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<DOMConfigurationInterface>;
declare const DOMConfiguration_base: typeof DOMConfigurationClass;
/**
 * Class org.w3c.dom.DOMConfiguration.
 *
 * This actually imports the java class for further use.
 * The class {@link DOMConfigurationClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DOMConfiguration extends DOMConfiguration_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DOMConfiguration;
//# sourceMappingURL=DOMConfiguration.d.ts.map