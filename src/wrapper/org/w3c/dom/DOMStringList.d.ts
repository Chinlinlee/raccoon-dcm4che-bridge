import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
/**
 * This class just defines types, you should import {@link DOMStringList} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DOMStringListClass extends JavaClass {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    contains(var0: string | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    containsSync(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    item(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    itemSync(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'int'
     */
    getLength(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getLengthSync(): number;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createDOMStringListProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface DOMStringListInterface {
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'boolean'
     */
    contains(var0: string | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    item(var0: java_lang_Integer | number): string | null;
    /**
     * @return original return type: 'int'
     */
    getLength(): number;
}
/**
 * Create a proxy for the {@link DOMStringList} interface.
 * All required methods in {@link DOMStringListInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createDOMStringListProxy(methods: DOMStringListInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<DOMStringListInterface>;
declare const DOMStringList_base: typeof DOMStringListClass;
/**
 * Class org.w3c.dom.DOMStringList.
 *
 * This actually imports the java class for further use.
 * The class {@link DOMStringListClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DOMStringList extends DOMStringList_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default DOMStringList;
