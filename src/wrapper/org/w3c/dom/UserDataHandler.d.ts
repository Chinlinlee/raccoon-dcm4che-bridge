import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Short as java_lang_Short } from "./../../../java/lang/Short";
import { Node as org_w3c_dom_Node, NodeInterface as org_w3c_dom_NodeInterface } from "./Node";
/**
 * This class just defines types, you should import {@link UserDataHandler} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class UserDataHandlerClass extends JavaClass {
    /**
     * @param var0 original type: 'short'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'org.w3c.dom.Node'
     * @param var4 original type: 'org.w3c.dom.Node'
     * @return original return type: 'void'
     */
    handle(var0: java_lang_Short | number, var1: string | null, var2: BasicOrJavaType | null, var3: org_w3c_dom_Node | JavaInterfaceProxy<org_w3c_dom_NodeInterface> | null, var4: org_w3c_dom_Node | JavaInterfaceProxy<org_w3c_dom_NodeInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'short'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'org.w3c.dom.Node'
     * @param var4 original type: 'org.w3c.dom.Node'
     * @return original return type: 'void'
     */
    handleSync(var0: java_lang_Short | number, var1: string | null, var2: BasicOrJavaType | null, var3: org_w3c_dom_Node | JavaInterfaceProxy<org_w3c_dom_NodeInterface> | null, var4: org_w3c_dom_Node | JavaInterfaceProxy<org_w3c_dom_NodeInterface> | null): void;
    /**
     * Original type: 'short'
     */
    static readonly NODE_DELETED: java_lang_Short | number;
    /**
     * Original type: 'short'
     */
    static readonly NODE_IMPORTED: java_lang_Short | number;
    /**
     * Original type: 'short'
     */
    static readonly NODE_ADOPTED: java_lang_Short | number;
    /**
     * Original type: 'short'
     */
    static readonly NODE_RENAMED: java_lang_Short | number;
    /**
     * Original type: 'short'
     */
    static readonly NODE_CLONED: java_lang_Short | number;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createUserDataHandlerProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface UserDataHandlerInterface {
    /**
     * @param var0 original type: 'short'
     * @param var1 original type: 'java.lang.String'
     * @param var2 original type: 'java.lang.Object'
     * @param var3 original type: 'org.w3c.dom.Node'
     * @param var4 original type: 'org.w3c.dom.Node'
     * @return original return type: 'void'
     */
    handle(var0: java_lang_Short | number, var1: string | null, var2: BasicOrJavaType | null, var3: org_w3c_dom_Node | JavaInterfaceProxy<org_w3c_dom_NodeInterface> | null, var4: org_w3c_dom_Node | JavaInterfaceProxy<org_w3c_dom_NodeInterface> | null): void;
}
/**
 * Create a proxy for the {@link UserDataHandler} interface.
 * All required methods in {@link UserDataHandlerInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createUserDataHandlerProxy(methods: UserDataHandlerInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<UserDataHandlerInterface>;
declare const UserDataHandler_base: typeof UserDataHandlerClass;
/**
 * Class org.w3c.dom.UserDataHandler.
 *
 * This actually imports the java class for further use.
 * The class {@link UserDataHandlerClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class UserDataHandler extends UserDataHandler_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default UserDataHandler;
