import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Mat$Tuple4 as org_opencv_core_Mat$Tuple4 } from "./Mat$Tuple4";
import { Mat$Tuple3 as org_opencv_core_Mat$Tuple3 } from "./Mat$Tuple3";
import { Mat$Tuple2 as org_opencv_core_Mat$Tuple2 } from "./Mat$Tuple2";
/**
 * This class just defines types, you should import {@link Mat$Atable} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Mat$AtableClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.Object'
     */
    getV(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    getVSync(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'org.opencv.core.Mat$Tuple4'
     * @return original return type: 'void'
     */
    setV4c(var0: org_opencv_core_Mat$Tuple4 | null): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat$Tuple4'
     * @return original return type: 'void'
     */
    setV4cSync(var0: org_opencv_core_Mat$Tuple4 | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setV(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setVSync(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat$Tuple3'
     * @return original return type: 'void'
     */
    setV3c(var0: org_opencv_core_Mat$Tuple3 | null): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat$Tuple3'
     * @return original return type: 'void'
     */
    setV3cSync(var0: org_opencv_core_Mat$Tuple3 | null): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat$Tuple2'
     * @return original return type: 'void'
     */
    setV2c(var0: org_opencv_core_Mat$Tuple2 | null): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat$Tuple2'
     * @return original return type: 'void'
     */
    setV2cSync(var0: org_opencv_core_Mat$Tuple2 | null): void;
    /**
     * @return original return type: 'org.opencv.core.Mat$Tuple4'
     */
    getV4c(): Promise<org_opencv_core_Mat$Tuple4 | null>;
    /**
     * @return original return type: 'org.opencv.core.Mat$Tuple4'
     */
    getV4cSync(): org_opencv_core_Mat$Tuple4 | null;
    /**
     * @return original return type: 'org.opencv.core.Mat$Tuple3'
     */
    getV3c(): Promise<org_opencv_core_Mat$Tuple3 | null>;
    /**
     * @return original return type: 'org.opencv.core.Mat$Tuple3'
     */
    getV3cSync(): org_opencv_core_Mat$Tuple3 | null;
    /**
     * @return original return type: 'org.opencv.core.Mat$Tuple2'
     */
    getV2c(): Promise<org_opencv_core_Mat$Tuple2 | null>;
    /**
     * @return original return type: 'org.opencv.core.Mat$Tuple2'
     */
    getV2cSync(): org_opencv_core_Mat$Tuple2 | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createMat$AtableProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface Mat$AtableInterface {
    /**
     * @return original return type: 'java.lang.Object'
     */
    getV(): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'org.opencv.core.Mat$Tuple4'
     * @return original return type: 'void'
     */
    setV4c(var0: org_opencv_core_Mat$Tuple4 | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    setV(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat$Tuple3'
     * @return original return type: 'void'
     */
    setV3c(var0: org_opencv_core_Mat$Tuple3 | null): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat$Tuple2'
     * @return original return type: 'void'
     */
    setV2c(var0: org_opencv_core_Mat$Tuple2 | null): void;
    /**
     * @return original return type: 'org.opencv.core.Mat$Tuple4'
     */
    getV4c(): org_opencv_core_Mat$Tuple4 | null;
    /**
     * @return original return type: 'org.opencv.core.Mat$Tuple3'
     */
    getV3c(): org_opencv_core_Mat$Tuple3 | null;
    /**
     * @return original return type: 'org.opencv.core.Mat$Tuple2'
     */
    getV2c(): org_opencv_core_Mat$Tuple2 | null;
}
/**
 * Create a proxy for the {@link Mat$Atable} interface.
 * All required methods in {@link Mat$AtableInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createMat$AtableProxy(methods: Mat$AtableInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<Mat$AtableInterface>;
declare const Mat$Atable_base: typeof Mat$AtableClass;
/**
 * Class org.opencv.core.Mat$Atable.
 *
 * This actually imports the java class for further use.
 * The class {@link Mat$AtableClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Mat$Atable extends Mat$Atable_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default Mat$Atable;
