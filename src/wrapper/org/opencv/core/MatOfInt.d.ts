import { JavaClass, BasicOrJavaType, JavaInterfaceProxy } from "java-bridge";
import { Mat as org_opencv_core_Mat } from "./Mat";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
import { List as java_util_List, ListInterface as java_util_ListInterface } from "./../../../java/util/List";
import { Short as java_lang_Short } from "./../../../java/lang/Short";
import { Double as java_lang_Double } from "./../../../java/lang/Double";
import { Float as java_lang_Float } from "./../../../java/lang/Float";
import { Size as org_opencv_core_Size } from "./Size";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Mat$Atable as org_opencv_core_Mat$Atable } from "./Mat$Atable";
import { Point as org_opencv_core_Point } from "./Point";
import { Range as org_opencv_core_Range } from "./Range";
import { Scalar as org_opencv_core_Scalar } from "./Scalar";
import { Rect as org_opencv_core_Rect } from "./Rect";
import { Boolean as java_lang_Boolean } from "./../../../java/lang/Boolean";
import { Cleaner as java_lang_ref_Cleaner } from "./../../../java/lang/ref/Cleaner";
/**
 * This class just defines types, you should import {@link MatOfInt} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MatOfIntClass extends JavaClass {
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    col(var0: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    colSync(var0: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @return original return type: 'void'
     */
    release(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    releaseSync(): void;
    /**
     * @return original return type: 'java.util.List'
     */
    toList(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    toListSync(): java_util_List | null;
    /**
     * @return original return type: 'int'
     */
    type(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    typeSync(): number;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'byte[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'int'
     */
    put(var0: (java_lang_Integer | number)[] | null, var1: Buffer | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'byte[]'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'int'
     */
    putSync(var0: (java_lang_Integer | number)[] | null, var1: Buffer | null, var2: java_lang_Integer | number, var3: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int[]'
     * @return original return type: 'int'
     */
    put(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Integer | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int[]'
     * @return original return type: 'int'
     */
    putSync(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Integer | number)[] | null): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'short[]'
     * @return original return type: 'int'
     */
    put(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Short | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'short[]'
     * @return original return type: 'int'
     */
    putSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Short | number)[] | null): number;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'short[]'
     * @return original return type: 'int'
     */
    put(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Short | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'short[]'
     * @return original return type: 'int'
     */
    putSync(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Short | number)[] | null): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'byte[]'
     * @return original return type: 'int'
     */
    put(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: Buffer | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'byte[]'
     * @return original return type: 'int'
     */
    putSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: Buffer | null): number;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'byte[]'
     * @return original return type: 'int'
     */
    put(var0: (java_lang_Integer | number)[] | null, var1: Buffer | null): Promise<number>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'byte[]'
     * @return original return type: 'int'
     */
    putSync(var0: (java_lang_Integer | number)[] | null, var1: Buffer | null): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'byte[]'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'int'
     */
    put(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: Buffer | null, var3: java_lang_Integer | number, var4: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'byte[]'
     * @param var3 original type: 'int'
     * @param var4 original type: 'int'
     * @return original return type: 'int'
     */
    putSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: Buffer | null, var3: java_lang_Integer | number, var4: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'double[]'
     * @return original return type: 'int'
     */
    put(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Double | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'double[]'
     * @return original return type: 'int'
     */
    putSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Double | number)[] | null): number;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'double[]'
     * @return original return type: 'int'
     */
    put(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Double | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'double[]'
     * @return original return type: 'int'
     */
    putSync(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Double | number)[] | null): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'float[]'
     * @return original return type: 'int'
     */
    put(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Float | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'float[]'
     * @return original return type: 'int'
     */
    putSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Float | number)[] | null): number;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'float[]'
     * @return original return type: 'int'
     */
    put(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Float | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'float[]'
     * @return original return type: 'int'
     */
    putSync(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Float | number)[] | null): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int[]'
     * @return original return type: 'int'
     */
    put(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Integer | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int[]'
     * @return original return type: 'int'
     */
    putSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Integer | number)[] | null): number;
    /**
     * @return original return type: 'boolean'
     */
    empty(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    emptySync(): boolean;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'org.opencv.core.Mat'
     * @return original return type: 'void'
     */
    copyTo(var0: org_opencv_core_Mat | null, var1: org_opencv_core_Mat | null): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'org.opencv.core.Mat'
     * @return original return type: 'void'
     */
    copyToSync(var0: org_opencv_core_Mat | null, var1: org_opencv_core_Mat | null): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'void'
     */
    copyTo(var0: org_opencv_core_Mat | null): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'void'
     */
    copyToSync(var0: org_opencv_core_Mat | null): void;
    /**
     * @return original return type: 'long'
     */
    elemSize1(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    elemSize1Sync(): number;
    /**
     * @return original return type: 'int[]'
     */
    toArray(): Promise<(number)[] | null>;
    /**
     * @return original return type: 'int[]'
     */
    toArraySync(): (number)[] | null;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    create(var0: (java_lang_Integer | number)[] | null, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    createSync(var0: (java_lang_Integer | number)[] | null, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    create(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'void'
     */
    createSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'org.opencv.core.Size'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    create(var0: org_opencv_core_Size | null, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Size'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    createSync(var0: org_opencv_core_Size | null, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'org.opencv.core.MatOfInt'
     */
    static fromNativeAddr(var0: java_lang_Long | bigint | number): Promise<MatOfInt | null>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'org.opencv.core.MatOfInt'
     */
    static fromNativeAddrSync(var0: java_lang_Long | bigint | number): MatOfInt | null;
    /**
     * @return original return type: 'int'
     */
    height(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    heightSync(): number;
    /**
     * @return original return type: 'long'
     */
    dataAddr(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    dataAddrSync(): number;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'void'
     */
    fromList(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.List'
     * @return original return type: 'void'
     */
    fromListSync(var0: java_util_List | JavaInterfaceProxy<java_util_ListInterface> | null): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'int'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'void'
     */
    convertTo(var0: org_opencv_core_Mat | null, var1: java_lang_Integer | number, var2: java_lang_Double | number, var3: java_lang_Double | number): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'int'
     * @param var2 original type: 'double'
     * @param var3 original type: 'double'
     * @return original return type: 'void'
     */
    convertToSync(var0: org_opencv_core_Mat | null, var1: java_lang_Integer | number, var2: java_lang_Double | number, var3: java_lang_Double | number): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'int'
     * @param var2 original type: 'double'
     * @return original return type: 'void'
     */
    convertTo(var0: org_opencv_core_Mat | null, var1: java_lang_Integer | number, var2: java_lang_Double | number): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'int'
     * @param var2 original type: 'double'
     * @return original return type: 'void'
     */
    convertToSync(var0: org_opencv_core_Mat | null, var1: java_lang_Integer | number, var2: java_lang_Double | number): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    convertTo(var0: org_opencv_core_Mat | null, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    convertToSync(var0: org_opencv_core_Mat | null, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int[]'
     * @return original return type: 'org.opencv.core.Mat'
     */
    reshape(var0: java_lang_Integer | number, var1: (java_lang_Integer | number)[] | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int[]'
     * @return original return type: 'org.opencv.core.Mat'
     */
    reshapeSync(var0: java_lang_Integer | number, var1: (java_lang_Integer | number)[] | null): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    reshape(var0: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    reshapeSync(var0: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    reshape(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    reshapeSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Size'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static zeros(var0: org_opencv_core_Size | null, var1: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Size'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static zerosSync(var0: org_opencv_core_Size | null, var1: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static zeros(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static zerosSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static zeros(var0: (java_lang_Integer | number)[] | null, var1: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static zerosSync(var0: (java_lang_Integer | number)[] | null, var1: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static eye(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static eyeSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Size'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static eye(var0: org_opencv_core_Size | null, var1: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Size'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static eyeSync(var0: org_opencv_core_Size | null, var1: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'int[]'
     * @return original return type: 'org.opencv.core.Mat$Atable'
     */
    at(var0: java_lang_Class | null, var1: (java_lang_Integer | number)[] | null): Promise<org_opencv_core_Mat$Atable | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'int[]'
     * @return original return type: 'org.opencv.core.Mat$Atable'
     */
    atSync(var0: java_lang_Class | null, var1: (java_lang_Integer | number)[] | null): org_opencv_core_Mat$Atable | null;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat$Atable'
     */
    at(var0: java_lang_Class | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<org_opencv_core_Mat$Atable | null>;
    /**
     * @param var0 original type: 'java.lang.Class'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat$Atable'
     */
    atSync(var0: java_lang_Class | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): org_opencv_core_Mat$Atable | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    size(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    sizeSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'org.opencv.core.Size'
     */
    size(): Promise<org_opencv_core_Size | null>;
    /**
     * @return original return type: 'org.opencv.core.Size'
     */
    sizeSync(): org_opencv_core_Size | null;
    /**
     * @return original return type: 'int'
     */
    channels(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    channelsSync(): number;
    /**
     * @param var0 original type: 'org.opencv.core.Size'
     * @param var1 original type: 'org.opencv.core.Point'
     * @return original return type: 'void'
     */
    locateROI(var0: org_opencv_core_Size | null, var1: org_opencv_core_Point | null): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Size'
     * @param var1 original type: 'org.opencv.core.Point'
     * @return original return type: 'void'
     */
    locateROISync(var0: org_opencv_core_Size | null, var1: org_opencv_core_Point | null): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    alloc(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    allocSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    assignTo(var0: org_opencv_core_Mat | null, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    assignToSync(var0: org_opencv_core_Mat | null, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'void'
     */
    assignTo(var0: org_opencv_core_Mat | null): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'void'
     */
    assignToSync(var0: org_opencv_core_Mat | null): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'void'
     */
    copySize(var0: org_opencv_core_Mat | null): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'void'
     */
    copySizeSync(var0: org_opencv_core_Mat | null): void;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'int'
     */
    dims(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    dimsSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    diag(var0: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    diagSync(var0: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @return original return type: 'org.opencv.core.Mat'
     */
    diag(): Promise<org_opencv_core_Mat | null>;
    /**
     * @return original return type: 'org.opencv.core.Mat'
     */
    diagSync(): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static diag(var0: org_opencv_core_Mat | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static diagSync(var0: org_opencv_core_Mat | null): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'double'
     * @return original return type: 'org.opencv.core.Mat'
     */
    mul(var0: org_opencv_core_Mat | null, var1: java_lang_Double | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'double'
     * @return original return type: 'org.opencv.core.Mat'
     */
    mulSync(var0: org_opencv_core_Mat | null, var1: java_lang_Double | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    mul(var0: org_opencv_core_Mat | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    mulSync(var0: org_opencv_core_Mat | null): org_opencv_core_Mat | null;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'double'
     */
    dot(var0: org_opencv_core_Mat | null): Promise<number>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'double'
     */
    dotSync(var0: org_opencv_core_Mat | null): number;
    /**
     * @return original return type: 'long'
     */
    elemSize(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    elemSizeSync(): number;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    matMul(var0: org_opencv_core_Mat | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    matMulSync(var0: org_opencv_core_Mat | null): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'void'
     */
    push_back(var0: org_opencv_core_Mat | null): Promise<void>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'void'
     */
    push_backSync(var0: org_opencv_core_Mat | null): void;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'long'
     */
    total(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    totalSync(): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    adjustROI(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    adjustROISync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int[]'
     * @return original return type: 'int'
     */
    get(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Integer | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int[]'
     * @return original return type: 'int'
     */
    getSync(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Integer | number)[] | null): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'float[]'
     * @return original return type: 'int'
     */
    get(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Float | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'float[]'
     * @return original return type: 'int'
     */
    getSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Float | number)[] | null): number;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'float[]'
     * @return original return type: 'int'
     */
    get(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Float | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'float[]'
     * @return original return type: 'int'
     */
    getSync(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Float | number)[] | null): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'double[]'
     * @return original return type: 'int'
     */
    get(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Double | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'double[]'
     * @return original return type: 'int'
     */
    getSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Double | number)[] | null): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int[]'
     * @return original return type: 'int'
     */
    get(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Integer | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int[]'
     * @return original return type: 'int'
     */
    getSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Integer | number)[] | null): number;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'short[]'
     * @return original return type: 'int'
     */
    get(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Short | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'short[]'
     * @return original return type: 'int'
     */
    getSync(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Short | number)[] | null): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'short[]'
     * @return original return type: 'int'
     */
    get(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Short | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'short[]'
     * @return original return type: 'int'
     */
    getSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: (java_lang_Short | number)[] | null): number;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'byte[]'
     * @return original return type: 'int'
     */
    get(var0: (java_lang_Integer | number)[] | null, var1: Buffer | null): Promise<number>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'byte[]'
     * @return original return type: 'int'
     */
    getSync(var0: (java_lang_Integer | number)[] | null, var1: Buffer | null): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'byte[]'
     * @return original return type: 'int'
     */
    get(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: Buffer | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'byte[]'
     * @return original return type: 'int'
     */
    getSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: Buffer | null): number;
    /**
     * @param var0 original type: 'int[]'
     * @return original return type: 'double[]'
     */
    get(var0: (java_lang_Integer | number)[] | null): Promise<(number)[] | null>;
    /**
     * @param var0 original type: 'int[]'
     * @return original return type: 'double[]'
     */
    getSync(var0: (java_lang_Integer | number)[] | null): (number)[] | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'double[]'
     */
    get(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<(number)[] | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'double[]'
     */
    getSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): (number)[] | null;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'double[]'
     * @return original return type: 'int'
     */
    get(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Double | number)[] | null): Promise<number>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'double[]'
     * @return original return type: 'int'
     */
    getSync(var0: (java_lang_Integer | number)[] | null, var1: (java_lang_Double | number)[] | null): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    rowRange(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    rowRangeSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Range'
     * @return original return type: 'org.opencv.core.Mat'
     */
    rowRange(var0: org_opencv_core_Range | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Range'
     * @return original return type: 'org.opencv.core.Mat'
     */
    rowRangeSync(var0: org_opencv_core_Range | null): org_opencv_core_Mat | null;
    /**
     * @return original return type: 'boolean'
     */
    isContinuous(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isContinuousSync(): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    row(var0: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    rowSync(var0: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    dump(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    dumpSync(): string | null;
    /**
     * @return original return type: 'int'
     */
    cols(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    colsSync(): number;
    /**
     * @return original return type: 'long'
     */
    getNativeObjAddr(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    getNativeObjAddrSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isSubmatrix(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isSubmatrixSync(): boolean;
    /**
     * @param var0 original type: 'int[]'
     * @return original return type: 'void'
     */
    fromArray(var0: (java_lang_Integer | number)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'int[]'
     * @return original return type: 'void'
     */
    fromArraySync(var0: (java_lang_Integer | number)[] | null): void;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    cross(var0: org_opencv_core_Mat | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    crossSync(var0: org_opencv_core_Mat | null): org_opencv_core_Mat | null;
    /**
     * @return original return type: 'int'
     */
    rows(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    rowsSync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'long'
     */
    step1(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'long'
     */
    step1Sync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'long'
     */
    step1(): Promise<number>;
    /**
     * @return original return type: 'long'
     */
    step1Sync(): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    inv(var0: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    invSync(var0: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @return original return type: 'org.opencv.core.Mat'
     */
    inv(): Promise<org_opencv_core_Mat | null>;
    /**
     * @return original return type: 'org.opencv.core.Mat'
     */
    invSync(): org_opencv_core_Mat | null;
    /**
     * @return original return type: 'int'
     */
    depth(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    depthSync(): number;
    /**
     * @return original return type: 'org.opencv.core.Mat'
     */
    t(): Promise<org_opencv_core_Mat | null>;
    /**
     * @return original return type: 'org.opencv.core.Mat'
     */
    tSync(): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.lang.Object'
     */
    clone(): Promise<BasicOrJavaType | null>;
    /**
     * @return original return type: 'java.lang.Object'
     */
    cloneSync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'org.opencv.core.Mat'
     */
    clone(): Promise<org_opencv_core_Mat | null>;
    /**
     * @return original return type: 'org.opencv.core.Mat'
     */
    cloneSync(): org_opencv_core_Mat | null;
    /**
     * @return original return type: 'int'
     */
    width(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    widthSync(): number;
    /**
     * @param var0 original type: 'org.opencv.core.Range'
     * @return original return type: 'org.opencv.core.Mat'
     */
    colRange(var0: org_opencv_core_Range | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Range'
     * @return original return type: 'org.opencv.core.Mat'
     */
    colRangeSync(var0: org_opencv_core_Range | null): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    colRange(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    colRangeSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static ones(var0: (java_lang_Integer | number)[] | null, var1: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int[]'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static onesSync(var0: (java_lang_Integer | number)[] | null, var1: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Size'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static ones(var0: org_opencv_core_Size | null, var1: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Size'
     * @param var1 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static onesSync(var0: org_opencv_core_Size | null, var1: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static ones(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    static onesSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    setTo(var0: org_opencv_core_Mat | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    setToSync(var0: org_opencv_core_Mat | null): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    setTo(var0: org_opencv_core_Mat | null, var1: org_opencv_core_Mat | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @param var1 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    setToSync(var0: org_opencv_core_Mat | null, var1: org_opencv_core_Mat | null): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Scalar'
     * @param var1 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    setTo(var0: org_opencv_core_Scalar | null, var1: org_opencv_core_Mat | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Scalar'
     * @param var1 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.Mat'
     */
    setToSync(var0: org_opencv_core_Scalar | null, var1: org_opencv_core_Mat | null): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Scalar'
     * @return original return type: 'org.opencv.core.Mat'
     */
    setTo(var0: org_opencv_core_Scalar | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Scalar'
     * @return original return type: 'org.opencv.core.Mat'
     */
    setToSync(var0: org_opencv_core_Scalar | null): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    submat(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'org.opencv.core.Mat'
     */
    submatSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Range'
     * @param var1 original type: 'org.opencv.core.Range'
     * @return original return type: 'org.opencv.core.Mat'
     */
    submat(var0: org_opencv_core_Range | null, var1: org_opencv_core_Range | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Range'
     * @param var1 original type: 'org.opencv.core.Range'
     * @return original return type: 'org.opencv.core.Mat'
     */
    submatSync(var0: org_opencv_core_Range | null, var1: org_opencv_core_Range | null): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Rect'
     * @return original return type: 'org.opencv.core.Mat'
     */
    submat(var0: org_opencv_core_Rect | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Rect'
     * @return original return type: 'org.opencv.core.Mat'
     */
    submatSync(var0: org_opencv_core_Rect | null): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'org.opencv.core.Range[]'
     * @return original return type: 'org.opencv.core.Mat'
     */
    submat(var0: (org_opencv_core_Range | null)[] | null): Promise<org_opencv_core_Mat | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Range[]'
     * @return original return type: 'org.opencv.core.Mat'
     */
    submatSync(var0: (org_opencv_core_Range | null)[] | null): org_opencv_core_Mat | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    checkVector(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    checkVectorSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    checkVector(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    checkVectorSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'boolean'
     * @return original return type: 'int'
     */
    checkVector(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Boolean | boolean): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'boolean'
     * @return original return type: 'int'
     */
    checkVectorSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Boolean | boolean): number;
    /**
     * Original type: 'java.lang.ref.Cleaner'
     */
    static readonly cleaner: java_lang_ref_Cleaner | null;
    /**
     * Original type: 'long'
     */
    readonly nativeObj: java_lang_Long | bigint | number;
    /**
     * @param var0 original type: 'int[]'
     */
    constructor(var0: (java_lang_Integer | number)[] | null);
    /**
     * @param var0 original type: 'int[]'
     * @return original return type: 'org.opencv.core.MatOfInt'
     */
    static newInstanceAsync(var0: (java_lang_Integer | number)[] | null): Promise<MatOfInt>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     */
    constructor(var0: org_opencv_core_Mat | null);
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.opencv.core.MatOfInt'
     */
    static newInstanceAsync(var0: org_opencv_core_Mat | null): Promise<MatOfInt>;
    constructor();
    /**
     * @return original return type: 'org.opencv.core.MatOfInt'
     */
    static newInstanceAsync(): Promise<MatOfInt>;
}
declare const MatOfInt_base: typeof MatOfIntClass;
/**
 * Class org.opencv.core.MatOfInt.
 *
 * This actually imports the java class for further use.
 * The class {@link MatOfIntClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MatOfInt extends MatOfInt_base {
}
export default MatOfInt;
