import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
/**
 * This class just defines types, you should import {@link CvType} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CvTypeClass extends JavaClass {
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_8SC(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_8SCSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static makeType(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    static makeTypeSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_8UC(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_8UCSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_16UC(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_16UCSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static ELEM_SIZE(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static ELEM_SIZESync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static typeToString(var0: java_lang_Integer | number): Promise<string | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.String'
     */
    static typeToStringSync(var0: java_lang_Integer | number): string | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_32SC(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_32SCSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_64FC(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_64FCSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isInteger(var0: java_lang_Integer | number): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    static isIntegerSync(var0: java_lang_Integer | number): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static depth(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static depthSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static channels(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static channelsSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_16SC(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_16SCSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_16FC(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_16FCSync(var0: java_lang_Integer | number): number;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_32FC(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    static CV_32FCSync(var0: java_lang_Integer | number): number;
    /**
     * Original type: 'int'
     */
    static readonly CV_64F: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_32FC1: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_32FC3: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_32FC2: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_USRTYPE1: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_32FC4: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_32F: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16F: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_32SC4: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_32SC3: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_32SC2: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_32SC1: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_8UC1: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_8SC3: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_8SC2: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_8SC1: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16FC4: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16FC3: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16FC2: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16FC1: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_8UC4: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_8UC3: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_8UC2: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_8SC4: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_8U: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_32S: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16U: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_64FC3: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_64FC4: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16UC4: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16UC3: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16UC2: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16SC4: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16UC1: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16SC3: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16S: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16SC2: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_64FC1: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_8S: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_16SC1: java_lang_Integer | number;
    /**
     * Original type: 'int'
     */
    static readonly CV_64FC2: java_lang_Integer | number;
    constructor();
    /**
     * @return original return type: 'org.opencv.core.CvType'
     */
    static newInstanceAsync(): Promise<CvType>;
}
declare const CvType_base: typeof CvTypeClass;
/**
 * Class org.opencv.core.CvType.
 *
 * This actually imports the java class for further use.
 * The class {@link CvTypeClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CvType extends CvType_base {
}
export default CvType;
