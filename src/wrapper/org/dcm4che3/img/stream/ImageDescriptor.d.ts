import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Class as java_lang_Class } from "./../../../../java/lang/Class";
import { Long as java_lang_Long } from "./../../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../../java/lang/Integer";
import { AnatomicRegion as org_weasis_dicom_ref_AnatomicRegion } from "./../../../weasis/dicom/ref/AnatomicRegion";
import { VoiLutModule as org_dcm4che3_img_lut_VoiLutModule } from "./../lut/VoiLutModule";
import { PhotometricInterpretation as org_dcm4che3_image_PhotometricInterpretation } from "./../../image/PhotometricInterpretation";
import { ModalityLutModule as org_dcm4che3_img_lut_ModalityLutModule } from "./../lut/ModalityLutModule";
import { List as java_util_List } from "./../../../../java/util/List";
import { Attributes as org_dcm4che3_data_Attributes } from "./../../data/Attributes";
/**
 * This class just defines types, you should import {@link ImageDescriptor} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ImageDescriptorClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'boolean'
     */
    isSigned(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isSignedSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    getFrames(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getFramesSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isFloatPixelData(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isFloatPixelDataSync(): boolean;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @return original return type: 'int'
     */
    getHighBit(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getHighBitSync(): number;
    /**
     * @return original return type: 'org.weasis.dicom.ref.AnatomicRegion'
     */
    getAnatomicRegion(): Promise<org_weasis_dicom_ref_AnatomicRegion | null>;
    /**
     * @return original return type: 'org.weasis.dicom.ref.AnatomicRegion'
     */
    getAnatomicRegionSync(): org_weasis_dicom_ref_AnatomicRegion | null;
    /**
     * @return original return type: 'int'
     */
    getRows(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getRowsSync(): number;
    /**
     * @return original return type: 'int'
     */
    getPlanarConfiguration(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getPlanarConfigurationSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSopClassUID(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getSopClassUIDSync(): string | null;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'int'
     */
    getColumns(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getColumnsSync(): number;
    /**
     * @return original return type: 'org.dcm4che3.img.lut.VoiLutModule'
     */
    getVoiLUT(): Promise<org_dcm4che3_img_lut_VoiLutModule | null>;
    /**
     * @return original return type: 'org.dcm4che3.img.lut.VoiLutModule'
     */
    getVoiLUTSync(): org_dcm4che3_img_lut_VoiLutModule | null;
    /**
     * @return original return type: 'boolean'
     */
    hasPaletteColorLookupTable(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    hasPaletteColorLookupTableSync(): boolean;
    /**
     * @return original return type: 'boolean'
     */
    isMultiframe(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isMultiframeSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @return original return type: 'java.lang.Integer'
     */
    getPixelPaddingValue(): Promise<number | null>;
    /**
     * @return original return type: 'java.lang.Integer'
     */
    getPixelPaddingValueSync(): number | null;
    /**
     * @return original return type: 'int'
     */
    getBitsCompressed(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getBitsCompressedSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPixelPresentation(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPixelPresentationSync(): string | null;
    /**
     * @return original return type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    getPhotometricInterpretation(): Promise<org_dcm4che3_image_PhotometricInterpretation | null>;
    /**
     * @return original return type: 'org.dcm4che3.image.PhotometricInterpretation'
     */
    getPhotometricInterpretationSync(): org_dcm4che3_image_PhotometricInterpretation | null;
    /**
     * @return original return type: 'int'
     */
    getBitsStored(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getBitsStoredSync(): number;
    /**
     * @return original return type: 'int'
     */
    getBitsAllocated(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getBitsAllocatedSync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isMultiframeWithEmbeddedOverlays(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isMultiframeWithEmbeddedOverlaysSync(): boolean;
    /**
     * @return original return type: 'int'
     */
    getSamples(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getSamplesSync(): number;
    /**
     * @return original return type: 'int'
     */
    getPixelRepresentation(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getPixelRepresentationSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getModality(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getModalitySync(): string | null;
    /**
     * @return original return type: 'boolean'
     */
    isBanded(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isBandedSync(): boolean;
    /**
     * @return original return type: 'org.dcm4che3.img.lut.ModalityLutModule'
     */
    getModalityLUT(): Promise<org_dcm4che3_img_lut_ModalityLutModule | null>;
    /**
     * @return original return type: 'org.dcm4che3.img.lut.ModalityLutModule'
     */
    getModalityLUTSync(): org_dcm4che3_img_lut_ModalityLutModule | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getStationName(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getStationNameSync(): string | null;
    /**
     * @return original return type: 'java.util.List'
     */
    getOverlayData(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getOverlayDataSync(): java_util_List | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.util.List'
     */
    getEmbeddedOverlay(): Promise<java_util_List | null>;
    /**
     * @return original return type: 'java.util.List'
     */
    getEmbeddedOverlaySync(): java_util_List | null;
    /**
     * @return original return type: 'java.lang.Integer'
     */
    getPixelPaddingRangeLimit(): Promise<number | null>;
    /**
     * @return original return type: 'java.lang.Integer'
     */
    getPixelPaddingRangeLimitSync(): number | null;
    /**
     * @return original return type: 'int'
     */
    getLength(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getLengthSync(): number;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPresentationLUTShape(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getPresentationLUTShapeSync(): string | null;
    /**
     * @return original return type: 'int'
     */
    getFrameLength(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getFrameLengthSync(): number;
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     */
    constructor(var0: org_dcm4che3_data_Attributes | null);
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'org.dcm4che3.img.stream.ImageDescriptor'
     */
    static newInstanceAsync(var0: org_dcm4che3_data_Attributes | null): Promise<ImageDescriptor>;
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'int'
     */
    constructor(var0: org_dcm4che3_data_Attributes | null, var1: java_lang_Integer | number);
    /**
     * @param var0 original type: 'org.dcm4che3.data.Attributes'
     * @param var1 original type: 'int'
     * @return original return type: 'org.dcm4che3.img.stream.ImageDescriptor'
     */
    static newInstanceAsync(var0: org_dcm4che3_data_Attributes | null, var1: java_lang_Integer | number): Promise<ImageDescriptor>;
}
declare const ImageDescriptor_base: typeof ImageDescriptorClass;
/**
 * Class org.dcm4che3.img.stream.ImageDescriptor.
 *
 * This actually imports the java class for further use.
 * The class {@link ImageDescriptorClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ImageDescriptor extends ImageDescriptor_base {
}
export default ImageDescriptor;
//# sourceMappingURL=ImageDescriptor.d.ts.map