import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Boolean as java_lang_Boolean } from "./../../../java/lang/Boolean";
import { Optional as java_util_Optional } from "./../../../java/util/Optional";
import { DicomImageReadParam as org_dcm4che3_img_DicomImageReadParam } from "./DicomImageReadParam";
import { OptionalInt as java_util_OptionalInt } from "./../../../java/util/OptionalInt";
import { Transcoder$Format as org_dcm4che3_img_Transcoder$Format } from "./Transcoder$Format";
/**
 * This class just defines types, you should import {@link ImageTranscodeParam} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ImageTranscodeParamClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'java.lang.Boolean'
     * @return original return type: 'void'
     */
    setPreserveRawImage(var0: java_lang_Boolean | boolean | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Boolean'
     * @return original return type: 'void'
     */
    setPreserveRawImageSync(var0: java_lang_Boolean | boolean | null): void;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setJpegCompressionQuality(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setJpegCompressionQualitySync(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'java.util.Optional'
     */
    isPreserveRawImage(): Promise<java_util_Optional | null>;
    /**
     * @return original return type: 'java.util.Optional'
     */
    isPreserveRawImageSync(): java_util_Optional | null;
    /**
     * @return original return type: 'org.dcm4che3.img.DicomImageReadParam'
     */
    getReadParam(): Promise<org_dcm4che3_img_DicomImageReadParam | null>;
    /**
     * @return original return type: 'org.dcm4che3.img.DicomImageReadParam'
     */
    getReadParamSync(): org_dcm4che3_img_DicomImageReadParam | null;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    getJpegCompressionQuality(): Promise<java_util_OptionalInt | null>;
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    getJpegCompressionQualitySync(): java_util_OptionalInt | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'org.dcm4che3.img.Transcoder$Format'
     */
    getFormat(): Promise<org_dcm4che3_img_Transcoder$Format | null>;
    /**
     * @return original return type: 'org.dcm4che3.img.Transcoder$Format'
     */
    getFormatSync(): org_dcm4che3_img_Transcoder$Format | null;
    /**
     * @param var0 original type: 'org.dcm4che3.img.Transcoder$Format'
     */
    constructor(var0: org_dcm4che3_img_Transcoder$Format | null);
    /**
     * @param var0 original type: 'org.dcm4che3.img.Transcoder$Format'
     * @return original return type: 'org.dcm4che3.img.ImageTranscodeParam'
     */
    static newInstanceAsync(var0: org_dcm4che3_img_Transcoder$Format | null): Promise<ImageTranscodeParam>;
    /**
     * @param var0 original type: 'org.dcm4che3.img.DicomImageReadParam'
     * @param var1 original type: 'org.dcm4che3.img.Transcoder$Format'
     */
    constructor(var0: org_dcm4che3_img_DicomImageReadParam | null, var1: org_dcm4che3_img_Transcoder$Format | null);
    /**
     * @param var0 original type: 'org.dcm4che3.img.DicomImageReadParam'
     * @param var1 original type: 'org.dcm4che3.img.Transcoder$Format'
     * @return original return type: 'org.dcm4che3.img.ImageTranscodeParam'
     */
    static newInstanceAsync(var0: org_dcm4che3_img_DicomImageReadParam | null, var1: org_dcm4che3_img_Transcoder$Format | null): Promise<ImageTranscodeParam>;
}
declare const ImageTranscodeParam_base: typeof ImageTranscodeParamClass;
/**
 * Class org.dcm4che3.img.ImageTranscodeParam.
 *
 * This actually imports the java class for further use.
 * The class {@link ImageTranscodeParamClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ImageTranscodeParam extends ImageTranscodeParam_base {
}
export default ImageTranscodeParam;
//# sourceMappingURL=ImageTranscodeParam.d.ts.map