import { JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../java/lang/Class";
import { Rectangle as java_awt_Rectangle } from "./../../../java/awt/Rectangle";
import { Long as java_lang_Long } from "./../../../java/lang/Long";
import { TransferSyntaxType as org_dcm4che3_imageio_codec_TransferSyntaxType } from "./../imageio/codec/TransferSyntaxType";
/**
 * This class just defines types, you should import {@link DicomJpegWriteParam} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DicomJpegWriteParamClass extends JavaClass {
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setPointTransform(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setPointTransformSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setNearLosslessError(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setNearLosslessErrorSync(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @param var0 original type: 'java.awt.Rectangle'
     * @return original return type: 'void'
     */
    setSourceRegion(var0: java_awt_Rectangle | null): Promise<void>;
    /**
     * @param var0 original type: 'java.awt.Rectangle'
     * @return original return type: 'void'
     */
    setSourceRegionSync(var0: java_awt_Rectangle | null): void;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'int'
     */
    getNearLosslessError(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getNearLosslessErrorSync(): number;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setCompressionRatioFactor(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setCompressionRatioFactorSync(var0: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setPrediction(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setPredictionSync(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'java.awt.Rectangle'
     */
    getSourceRegion(): Promise<java_awt_Rectangle | null>;
    /**
     * @return original return type: 'java.awt.Rectangle'
     */
    getSourceRegionSync(): java_awt_Rectangle | null;
    /**
     * @return original return type: 'int'
     */
    getPrediction(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getPredictionSync(): number;
    /**
     * @return original return type: 'int'
     */
    getCompressionQuality(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getCompressionQualitySync(): number;
    /**
     * @return original return type: 'boolean'
     */
    isCompressionLossless(): Promise<boolean>;
    /**
     * @return original return type: 'boolean'
     */
    isCompressionLosslessSync(): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setCompressionQuality(var0: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    setCompressionQualitySync(var0: java_lang_Integer | number): void;
    /**
     * @return original return type: 'int'
     */
    getCompressionRatioFactor(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getCompressionRatioFactorSync(): number;
    /**
     * @return original return type: 'org.dcm4che3.imageio.codec.TransferSyntaxType'
     */
    getType(): Promise<org_dcm4che3_imageio_codec_TransferSyntaxType | null>;
    /**
     * @return original return type: 'org.dcm4che3.imageio.codec.TransferSyntaxType'
     */
    getTypeSync(): org_dcm4che3_imageio_codec_TransferSyntaxType | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'int'
     */
    getPointTransform(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getPointTransformSync(): number;
    /**
     * @return original return type: 'int'
     */
    getJpegMode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getJpegModeSync(): number;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.img.DicomJpegWriteParam'
     */
    static buildDicomImageWriteParam(var0: string | null): Promise<DicomJpegWriteParam | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.dcm4che3.img.DicomJpegWriteParam'
     */
    static buildDicomImageWriteParamSync(var0: string | null): DicomJpegWriteParam | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getTransferSyntaxUid(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getTransferSyntaxUidSync(): string | null;
}
declare const DicomJpegWriteParam_base: typeof DicomJpegWriteParamClass;
/**
 * Class org.dcm4che3.img.DicomJpegWriteParam.
 *
 * This actually imports the java class for further use.
 * The class {@link DicomJpegWriteParamClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DicomJpegWriteParam extends DicomJpegWriteParam_base {
}
export default DicomJpegWriteParam;
//# sourceMappingURL=DicomJpegWriteParam.d.ts.map