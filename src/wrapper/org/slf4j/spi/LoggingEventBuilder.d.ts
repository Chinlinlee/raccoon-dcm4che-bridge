import { JavaClass, BasicOrJavaType, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Supplier as java_util_function_Supplier, SupplierInterface as java_util_function_SupplierInterface } from "./../../../java/util/function/Supplier";
import { Throwable as java_lang_Throwable } from "./../../../java/lang/Throwable";
import { Marker as org_slf4j_Marker, MarkerInterface as org_slf4j_MarkerInterface } from "./../Marker";
/**
 * This class just defines types, you should import {@link LoggingEventBuilder} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class LoggingEventBuilderClass extends JavaClass {
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addArgument(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): Promise<LoggingEventBuilder | null>;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addArgumentSync(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addArgument(var0: BasicOrJavaType | null): Promise<LoggingEventBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addArgumentSync(var0: BasicOrJavaType | null): LoggingEventBuilder | null;
    /**
     * @return original return type: 'void'
     */
    log(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    logSync(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    log(var0: string | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    logSync(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    log(var0: string | null, var1: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    logSync(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @return original return type: 'void'
     */
    log(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @return original return type: 'void'
     */
    logSync(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    log(var0: string | null, var1: (BasicOrJavaType | null)[] | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    logSync(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    log(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    logSync(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.function.Supplier'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addKeyValue(var0: string | null, var1: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): Promise<LoggingEventBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.function.Supplier'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addKeyValueSync(var0: string | null, var1: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addKeyValue(var0: string | null, var1: BasicOrJavaType | null): Promise<LoggingEventBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addKeyValueSync(var0: string | null, var1: BasicOrJavaType | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'java.lang.Throwable'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    setCause(var0: java_lang_Throwable | null): Promise<LoggingEventBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.Throwable'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    setCauseSync(var0: java_lang_Throwable | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    setMessage(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): Promise<LoggingEventBuilder | null>;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    setMessageSync(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    setMessage(var0: string | null): Promise<LoggingEventBuilder | null>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    setMessageSync(var0: string | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addMarker(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): Promise<LoggingEventBuilder | null>;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addMarkerSync(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): LoggingEventBuilder | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createLoggingEventBuilderProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface LoggingEventBuilderInterface {
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addArgument(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addArgument(var0: BasicOrJavaType | null): LoggingEventBuilder | null;
    /**
     * @return original return type: 'void'
     */
    log(): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    log(var0: string | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    log(var0: string | null, var1: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @return original return type: 'void'
     */
    log(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object[]'
     * @return original return type: 'void'
     */
    log(var0: string | null, var1: (BasicOrJavaType | null)[] | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    log(var0: string | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.util.function.Supplier'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addKeyValue(var0: string | null, var1: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addKeyValue(var0: string | null, var1: BasicOrJavaType | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'java.lang.Throwable'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    setCause(var0: java_lang_Throwable | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    setMessage(var0: java_util_function_Supplier | JavaInterfaceProxy<java_util_function_SupplierInterface> | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    setMessage(var0: string | null): LoggingEventBuilder | null;
    /**
     * @param var0 original type: 'org.slf4j.Marker'
     * @return original return type: 'org.slf4j.spi.LoggingEventBuilder'
     */
    addMarker(var0: org_slf4j_Marker | JavaInterfaceProxy<org_slf4j_MarkerInterface> | null): LoggingEventBuilder | null;
}
/**
 * Create a proxy for the {@link LoggingEventBuilder} interface.
 * All required methods in {@link LoggingEventBuilderInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createLoggingEventBuilderProxy(methods: LoggingEventBuilderInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<LoggingEventBuilderInterface>;
declare const LoggingEventBuilder_base: typeof LoggingEventBuilderClass;
/**
 * Class org.slf4j.spi.LoggingEventBuilder.
 *
 * This actually imports the java class for further use.
 * The class {@link LoggingEventBuilderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class LoggingEventBuilder extends LoggingEventBuilder_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default LoggingEventBuilder;
