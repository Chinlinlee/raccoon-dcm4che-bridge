import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
import { Association as org_dcm4che3_net_Association } from "./../../../../dcm4che3/net/Association";
import { PresentationContext as org_dcm4che3_net_pdu_PresentationContext } from "./../../../../dcm4che3/net/pdu/PresentationContext";
import { Attributes as org_dcm4che3_data_Attributes } from "./../../../../dcm4che3/data/Attributes";
/**
 * This class just defines types, you should import {@link MPPSScpInject} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MPPSScpInjectClass extends JavaClass {
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @param var1 original type: 'org.dcm4che3.net.pdu.PresentationContext'
     * @param var2 original type: 'org.dcm4che3.data.Attributes'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    onNCreateRQ(var0: org_dcm4che3_net_Association | null, var1: org_dcm4che3_net_pdu_PresentationContext | null, var2: org_dcm4che3_data_Attributes | null, var3: org_dcm4che3_data_Attributes | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @param var1 original type: 'org.dcm4che3.net.pdu.PresentationContext'
     * @param var2 original type: 'org.dcm4che3.data.Attributes'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    onNCreateRQSync(var0: org_dcm4che3_net_Association | null, var1: org_dcm4che3_net_pdu_PresentationContext | null, var2: org_dcm4che3_data_Attributes | null, var3: org_dcm4che3_data_Attributes | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @param var1 original type: 'org.dcm4che3.net.pdu.PresentationContext'
     * @param var2 original type: 'org.dcm4che3.data.Attributes'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    onNSetRQ(var0: org_dcm4che3_net_Association | null, var1: org_dcm4che3_net_pdu_PresentationContext | null, var2: org_dcm4che3_data_Attributes | null, var3: org_dcm4che3_data_Attributes | null): Promise<void>;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @param var1 original type: 'org.dcm4che3.net.pdu.PresentationContext'
     * @param var2 original type: 'org.dcm4che3.data.Attributes'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    onNSetRQSync(var0: org_dcm4che3_net_Association | null, var1: org_dcm4che3_net_pdu_PresentationContext | null, var2: org_dcm4che3_data_Attributes | null, var3: org_dcm4che3_data_Attributes | null): void;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createMPPSScpInjectProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface MPPSScpInjectInterface {
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @param var1 original type: 'org.dcm4che3.net.pdu.PresentationContext'
     * @param var2 original type: 'org.dcm4che3.data.Attributes'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    onNCreateRQ(var0: org_dcm4che3_net_Association | null, var1: org_dcm4che3_net_pdu_PresentationContext | null, var2: org_dcm4che3_data_Attributes | null, var3: org_dcm4che3_data_Attributes | null): void;
    /**
     * @param var0 original type: 'org.dcm4che3.net.Association'
     * @param var1 original type: 'org.dcm4che3.net.pdu.PresentationContext'
     * @param var2 original type: 'org.dcm4che3.data.Attributes'
     * @param var3 original type: 'org.dcm4che3.data.Attributes'
     * @return original return type: 'void'
     */
    onNSetRQ(var0: org_dcm4che3_net_Association | null, var1: org_dcm4che3_net_pdu_PresentationContext | null, var2: org_dcm4che3_data_Attributes | null, var3: org_dcm4che3_data_Attributes | null): void;
}
/**
 * Create a proxy for the {@link MPPSScpInject} interface.
 * All required methods in {@link MPPSScpInjectInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createMPPSScpInjectProxy(methods: MPPSScpInjectInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<MPPSScpInjectInterface>;
declare const MPPSScpInject_base: typeof MPPSScpInjectClass;
/**
 * Class org.github.chinlinlee.dcm777.net.MPPSScpInject.
 *
 * This actually imports the java class for further use.
 * The class {@link MPPSScpInjectClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MPPSScpInject extends MPPSScpInject_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default MPPSScpInject;
