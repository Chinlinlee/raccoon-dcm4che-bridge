/// <reference types="node" />
/// <reference types="node" />
import { JavaClass, BasicOrJavaType } from "java-bridge";
import { ImageCV as org_weasis_opencv_data_ImageCV } from "./ImageCV";
import { Mat as org_opencv_core_Mat } from "./../../../opencv/core/Mat";
import { Integer as java_lang_Integer } from "./../../../../java/lang/Integer";
import { Class as java_lang_Class } from "./../../../../java/lang/Class";
import { Long as java_lang_Long } from "./../../../../java/lang/Long";
import { DataBuffer as java_awt_image_DataBuffer } from "./../../../../java/awt/image/DataBuffer";
import { Boolean as java_lang_Boolean } from "./../../../../java/lang/Boolean";
import { Short as java_lang_Short } from "./../../../../java/lang/Short";
/**
 * This class just defines types, you should import {@link LookupTableCV} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class LookupTableCVClass extends JavaClass {
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.weasis.opencv.data.ImageCV'
     */
    lookup(var0: org_opencv_core_Mat | null): Promise<org_weasis_opencv_data_ImageCV | null>;
    /**
     * @param var0 original type: 'org.opencv.core.Mat'
     * @return original return type: 'org.weasis.opencv.data.ImageCV'
     */
    lookupSync(var0: org_opencv_core_Mat | null): org_weasis_opencv_data_ImageCV | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    lookup(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    lookupSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): number;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClass(): Promise<java_lang_Class>;
    /**
     * @return original return type: 'java.lang.Class'
     */
    getClassSync(): java_lang_Class;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    waitSync(): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getOffset(var0: java_lang_Integer | number): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'int'
     */
    getOffsetSync(var0: java_lang_Integer | number): number;
    /**
     * @return original return type: 'int'
     */
    getOffset(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getOffsetSync(): number;
    /**
     * @return original return type: 'int'
     */
    getDataType(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getDataTypeSync(): number;
    /**
     * @return original return type: 'void'
     */
    notifyAll(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifyAllSync(): void;
    /**
     * @return original return type: 'int[]'
     */
    getOffsets(): Promise<(number)[] | null>;
    /**
     * @return original return type: 'int[]'
     */
    getOffsetsSync(): (number)[] | null;
    /**
     * @return original return type: 'byte[][]'
     */
    getByteData(): Promise<(Buffer | null)[] | null>;
    /**
     * @return original return type: 'byte[][]'
     */
    getByteDataSync(): (Buffer | null)[] | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'byte[]'
     */
    getByteData(var0: java_lang_Integer | number): Promise<Buffer | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'byte[]'
     */
    getByteDataSync(var0: java_lang_Integer | number): Buffer | null;
    /**
     * @return original return type: 'int'
     */
    getNumBands(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getNumBandsSync(): number;
    /**
     * @return original return type: 'void'
     */
    notify(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    notifySync(): void;
    /**
     * @return original return type: 'int'
     */
    getNumEntries(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    getNumEntriesSync(): number;
    /**
     * @return original return type: 'short[][]'
     */
    getShortData(): Promise<((number)[] | null)[] | null>;
    /**
     * @return original return type: 'short[][]'
     */
    getShortDataSync(): ((number)[] | null)[] | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'short[]'
     */
    getShortData(var0: java_lang_Integer | number): Promise<(number)[] | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'short[]'
     */
    getShortDataSync(var0: java_lang_Integer | number): (number)[] | null;
    /**
     * @return original return type: 'int'
     */
    hashCode(): Promise<number>;
    /**
     * @return original return type: 'int'
     */
    hashCodeSync(): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equals(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    equalsSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @return original return type: 'java.awt.image.DataBuffer'
     */
    getData(): Promise<java_awt_image_DataBuffer | null>;
    /**
     * @return original return type: 'java.awt.image.DataBuffer'
     */
    getDataSync(): java_awt_image_DataBuffer | null;
    /**
     * @param var0 original type: 'byte[][]'
     * @param var1 original type: 'int[]'
     */
    constructor(var0: (Buffer | null)[] | null, var1: (java_lang_Integer | number)[] | null);
    /**
     * @param var0 original type: 'byte[][]'
     * @param var1 original type: 'int[]'
     * @return original return type: 'org.weasis.opencv.data.LookupTableCV'
     */
    static newInstanceAsync(var0: (Buffer | null)[] | null, var1: (java_lang_Integer | number)[] | null): Promise<LookupTableCV>;
    /**
     * @param var0 original type: 'byte[][]'
     * @param var1 original type: 'int[]'
     * @param var2 original type: 'boolean'
     */
    constructor(var0: (Buffer | null)[] | null, var1: (java_lang_Integer | number)[] | null, var2: java_lang_Boolean | boolean);
    /**
     * @param var0 original type: 'byte[][]'
     * @param var1 original type: 'int[]'
     * @param var2 original type: 'boolean'
     * @return original return type: 'org.weasis.opencv.data.LookupTableCV'
     */
    static newInstanceAsync(var0: (Buffer | null)[] | null, var1: (java_lang_Integer | number)[] | null, var2: java_lang_Boolean | boolean): Promise<LookupTableCV>;
    /**
     * @param var0 original type: 'short[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'boolean'
     */
    constructor(var0: (java_lang_Short | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Boolean | boolean);
    /**
     * @param var0 original type: 'short[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'boolean'
     * @return original return type: 'org.weasis.opencv.data.LookupTableCV'
     */
    static newInstanceAsync(var0: (java_lang_Short | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Boolean | boolean): Promise<LookupTableCV>;
    /**
     * @param var0 original type: 'short[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'boolean'
     * @param var3 original type: 'boolean'
     */
    constructor(var0: (java_lang_Short | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Boolean | boolean, var3: java_lang_Boolean | boolean);
    /**
     * @param var0 original type: 'short[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'boolean'
     * @param var3 original type: 'boolean'
     * @return original return type: 'org.weasis.opencv.data.LookupTableCV'
     */
    static newInstanceAsync(var0: (java_lang_Short | number)[] | null, var1: java_lang_Integer | number, var2: java_lang_Boolean | boolean, var3: java_lang_Boolean | boolean): Promise<LookupTableCV>;
    /**
     * @param var0 original type: 'byte[]'
     */
    constructor(var0: Buffer | null);
    /**
     * @param var0 original type: 'byte[]'
     * @return original return type: 'org.weasis.opencv.data.LookupTableCV'
     */
    static newInstanceAsync(var0: Buffer | null): Promise<LookupTableCV>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     */
    constructor(var0: Buffer | null, var1: java_lang_Integer | number);
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @return original return type: 'org.weasis.opencv.data.LookupTableCV'
     */
    static newInstanceAsync(var0: Buffer | null, var1: java_lang_Integer | number): Promise<LookupTableCV>;
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'boolean'
     */
    constructor(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Boolean | boolean);
    /**
     * @param var0 original type: 'byte[]'
     * @param var1 original type: 'int'
     * @param var2 original type: 'boolean'
     * @return original return type: 'org.weasis.opencv.data.LookupTableCV'
     */
    static newInstanceAsync(var0: Buffer | null, var1: java_lang_Integer | number, var2: java_lang_Boolean | boolean): Promise<LookupTableCV>;
    /**
     * @param var0 original type: 'byte[][]'
     */
    constructor(var0: (Buffer | null)[] | null);
    /**
     * @param var0 original type: 'byte[][]'
     * @return original return type: 'org.weasis.opencv.data.LookupTableCV'
     */
    static newInstanceAsync(var0: (Buffer | null)[] | null): Promise<LookupTableCV>;
    /**
     * @param var0 original type: 'byte[][]'
     * @param var1 original type: 'int'
     */
    constructor(var0: (Buffer | null)[] | null, var1: java_lang_Integer | number);
    /**
     * @param var0 original type: 'byte[][]'
     * @param var1 original type: 'int'
     * @return original return type: 'org.weasis.opencv.data.LookupTableCV'
     */
    static newInstanceAsync(var0: (Buffer | null)[] | null, var1: java_lang_Integer | number): Promise<LookupTableCV>;
}
declare const LookupTableCV_base: typeof LookupTableCVClass;
/**
 * Class org.weasis.opencv.data.LookupTableCV.
 *
 * This actually imports the java class for further use.
 * The class {@link LookupTableCVClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class LookupTableCV extends LookupTableCV_base {
}
export default LookupTableCV;
//# sourceMappingURL=LookupTableCV.d.ts.map