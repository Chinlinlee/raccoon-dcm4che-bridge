import { JavaClass, InterfaceProxyOptions, JavaInterfaceProxy } from "java-bridge";
/**
 * This class just defines types, you should import {@link AnatomicBuilder$CategoryBuilder} instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AnatomicBuilder$CategoryBuilderClass extends JavaClass {
    /**
     * @return original return type: 'java.lang.String'
     */
    getTitle(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getTitleSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getContextUID(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getContextUIDSync(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getIdentifier(): Promise<string | null>;
    /**
     * @return original return type: 'java.lang.String'
     */
    getIdentifierSync(): string | null;
}
/**
 * This interface just defines types for creating proxies,
 * you should use {@link createAnatomicBuilder$CategoryBuilderProxy} for actually creating the proxies.
 *
 * Optional methods in here may still be required by java.
 * This is caused by typescript not allowing to have both optional and
 * non-optional signatures for the same interface member.
 *
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export interface AnatomicBuilder$CategoryBuilderInterface {
    /**
     * @return original return type: 'java.lang.String'
     */
    getTitle(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getContextUID(): string | null;
    /**
     * @return original return type: 'java.lang.String'
     */
    getIdentifier(): string | null;
}
/**
 * Create a proxy for the {@link AnatomicBuilder$CategoryBuilder} interface.
 * All required methods in {@link AnatomicBuilder$CategoryBuilderInterface} must be implemented.
 *
 * @param methods the methods to implement
 * @param opts the proxy options
 * @return the proxy
 */
export declare function createAnatomicBuilder$CategoryBuilderProxy(methods: AnatomicBuilder$CategoryBuilderInterface, opts?: InterfaceProxyOptions): JavaInterfaceProxy<AnatomicBuilder$CategoryBuilderInterface>;
declare const AnatomicBuilder$CategoryBuilder_base: typeof AnatomicBuilder$CategoryBuilderClass;
/**
 * Class org.weasis.dicom.ref.AnatomicBuilder$CategoryBuilder.
 *
 * This actually imports the java class for further use.
 * The class {@link AnatomicBuilder$CategoryBuilderClass} only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class AnatomicBuilder$CategoryBuilder extends AnatomicBuilder$CategoryBuilder_base {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor();
}
export default AnatomicBuilder$CategoryBuilder;
